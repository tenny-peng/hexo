<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Tenny&#39;s Blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://tenny-peng.github.io/"/>
  <updated>2017-05-04T06:15:27.017Z</updated>
  <id>https://tenny-peng.github.io/</id>
  
  <author>
    <name>Tenny Peng</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>spring整合dubbo(zookeeper)</title>
    <link href="https://tenny-peng.github.io/2017/05/04/spring%E6%95%B4%E5%90%88dubbo-zookeeper/"/>
    <id>https://tenny-peng.github.io/2017/05/04/spring整合dubbo-zookeeper/</id>
    <published>2017-05-04T01:47:17.000Z</published>
    <updated>2017-05-04T06:15:27.017Z</updated>
    
    <content type="html"><![CDATA[<h1 id="dubbo是什么"><a href="#dubbo是什么" class="headerlink" title="dubbo是什么"></a>dubbo是什么</h1><p>Dubbo是阿里巴巴公司开源的一个高性能优秀的分布式服务框架，致力于提供高性能和透明化的RPC远程服务调用方案，以及SOA服务治理方案。可以和Spring框架无缝集成。</p>
<p>主要核心部件</p>
<ul>
<li>远程通讯：提供对多种基于长连接的NIO框架抽象封装，包括多种线程模型，序列化，以及“请求-响应”模式的信息交换方式。</li>
<li>集群容错：提供基于接口方法的透明远程过程调用，包括多协议支持，以及软负载均衡，失败容错，地址路由，动态配置等集群支持。</li>
<li>自动发现：基于注册中心目录服务，使服务消费方能动态的查找服务提供方，使地址透明，使服务提供方可以平滑增加或减少机器。</li>
</ul>
<h1 id="dubbo能做什么"><a href="#dubbo能做什么" class="headerlink" title="dubbo能做什么"></a>dubbo能做什么</h1><ul>
<li>透明化的远程方法调用，就像调用本地方法一样调用远程方法，只需简单配置，没有任何API侵入。</li>
<li>软负载均衡及容错机制，可在内网替代F5等硬件负载均衡器，降低成本，减少单点。</li>
<li>服务自动注册与发现，不再需要写死服务提供方地址，注册中心基于接口名查询服务提供者的IP地址，并且能够平滑添加或删除服务提供者。</li>
</ul>
<h1 id="dubbo的架构"><a href="#dubbo的架构" class="headerlink" title="dubbo的架构"></a>dubbo的架构</h1><p><img src="/2017/05/04/spring整合dubbo-zookeeper/dubbo架构图.png" alt="dubbo架构图"></p>
<p>节点角色说明：</p>
<ul>
<li>Provider：暴露服务方称之为“服务提供者”。</li>
<li>Consumer：调用远程服务方称之为“服务消费者”。</li>
<li>Registry：服务注册与发现的中心目录服务称之为“服务注册中心”。</li>
<li>Monitor：统计服务的调用次数和调用时间的日志服务称之为“服务监控中心”。</li>
<li>Container：服务运行容器。</li>
</ul>
<p>调用关系说明：</p>
<ol>
<li><p>服务容器负责启动，加载，运行服务提供者。</p>
</li>
<li><p>服务提供者在启动时，向注册中心注册自己提供的服务。</p>
</li>
<li><p>服务消费者在启动时，向注册中心订阅自己所需的服务。</p>
</li>
<li><p>注册中心返回服务提供者地址列表给消费者，如果有变更，注册中心将基于长连接推送变更数据给消费者。</p>
</li>
<li><p>服务消费者，从提供者地址列表中，基于软负载均衡算法，选一台提供者进行调用，如果调用失败，再选另一台调用。</p>
</li>
<li><p>服务消费者和提供者，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心。</p>
</li>
</ol>
<h1 id="spring集成使用"><a href="#spring集成使用" class="headerlink" title="spring集成使用"></a>spring集成使用</h1><p>Dubbo采用全Spring配置方式，透明化接入应用，对应用没有任何API侵入，只需用Spring加载Dubbo的配置即可，Dubbo基于Spring的Schema扩展进行加载。</p>
<h2 id="下载zookeeper"><a href="#下载zookeeper" class="headerlink" title="下载zookeeper"></a>下载zookeeper</h2><p>zookeeper是一个分布式服务框架，本例使用zookeeper管理dubbo服务。下载地址：<a href="http://www.apache.org/dyn/closer.cgi/zookeeper/" target="_blank" rel="external">http://www.apache.org/dyn/closer.cgi/zookeeper/</a>  下载后解压即可，进<br>入zookeeper根目录下的bin目录，如D:\devsoft\zookeeper-3.4.8\bin，双击zkServer.cmd启动注册中心服务。</p>
<h2 id="服务提供者"><a href="#服务提供者" class="headerlink" title="服务提供者"></a>服务提供者</h2><p>新建一个maven工程，作为服务提供方。</p>
<h3 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h3><p>除了基本的spring等依赖，额外添加dubbo和zkclient依赖：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;!-- spring dubbo 整合 --&gt;</div><div class="line">&lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;dubbo&lt;/artifactId&gt;</div><div class="line">    &lt;version&gt;2.5.3&lt;/version&gt;</div><div class="line">&lt;/dependency&gt;</div><div class="line"></div><div class="line">&lt;!-- dubbo注册在zookeeper上，必须引用zkclient --&gt;</div><div class="line">&lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;com.github.sgroschupf&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;zkclient&lt;/artifactId&gt;</div><div class="line">    &lt;version&gt;0.1&lt;/version&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure></p>
<h3 id="spring-dubbo-xml"><a href="#spring-dubbo-xml" class="headerlink" title="spring-dubbo.xml"></a>spring-dubbo.xml</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">   	xmlns:dubbo=&quot;http://code.alibabatech.com/schema/dubbo&quot;</div><div class="line">   	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">						http://www.springframework.org/schema/beans/spring-beans.xsd</div><div class="line">				       	http://code.alibabatech.com/schema/dubbo</div><div class="line">				       	http://code.alibabatech.com/schema/dubbo/dubbo.xsd&quot;&gt;</div><div class="line"></div><div class="line">    &lt;!-- 提供方应用信息，用于计算依赖关系 --&gt;</div><div class="line">    &lt;dubbo:application name=&quot;dubbo_service_provider&quot; /&gt;</div><div class="line"></div><div class="line">    &lt;!--使用zookeeper注册中心暴露和发现服务地址 --&gt;</div><div class="line">    &lt;dubbo:registry address=&quot;zookeeper://127.0.0.1:2181&quot; /&gt;</div><div class="line"></div><div class="line">    &lt;!-- 用dubbo协议在20880端口暴露服务 --&gt;  </div><div class="line">    &lt;dubbo:protocol name=&quot;dubbo&quot; port=&quot;20880&quot; /&gt;</div><div class="line"></div><div class="line">    &lt;!-- 声明需要暴露的服务接口 --&gt;  </div><div class="line">    &lt;dubbo:service interface=&quot;com.news.service.IDubboService&quot; ref=&quot;dubboService&quot; /&gt;</div><div class="line"></div><div class="line">    &lt;!-- 具体的实现bean --&gt;  </div><div class="line">    &lt;bean id=&quot;dubboService&quot; class=&quot;com.news.service.impl.DubboServiceImpl&quot; /&gt;</div><div class="line"></div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure>
<h3 id="IDubboService-amp-DubboServiceImpl"><a href="#IDubboService-amp-DubboServiceImpl" class="headerlink" title="IDubboService &amp; DubboServiceImpl"></a>IDubboService &amp; DubboServiceImpl</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">package com.news.service;</div><div class="line"></div><div class="line">/**</div><div class="line"> * TODO</div><div class="line"> *</div><div class="line"> * @author tenny.peng</div><div class="line"> */</div><div class="line">public interface IDubboService &#123;</div><div class="line">	public void sayHello(String name);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">package com.news.service.impl;</div><div class="line"></div><div class="line">import com.news.service.IDubboService;</div><div class="line"></div><div class="line">/**</div><div class="line"> * TODO</div><div class="line"> *</div><div class="line"> * @author tenny.peng</div><div class="line"> */</div><div class="line">public class DubboServiceImpl implements IDubboService &#123;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public void sayHello(String name) &#123;</div><div class="line">		System.out.println(&quot;hello: &quot; + name);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="TestDubbo-java"><a href="#TestDubbo-java" class="headerlink" title="TestDubbo.java"></a>TestDubbo.java</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">package news;</div><div class="line"></div><div class="line">import java.io.IOException;</div><div class="line"></div><div class="line">import org.springframework.context.support.ClassPathXmlApplicationContext;</div><div class="line"></div><div class="line">/**</div><div class="line"> * TODO</div><div class="line"> *</div><div class="line"> * @author tenny.peng</div><div class="line"> */</div><div class="line">public class TestDubbo &#123;</div><div class="line"></div><div class="line">	public static void main(String[] args) throws IOException &#123;</div><div class="line">		ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(&quot;dubbo/spring-dubbo.xml&quot;);</div><div class="line"></div><div class="line">		System.in.read(); // 为保证服务一直开着，利用输入流的阻塞来模拟</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行TestDubbo.java，我们的服务提供方就完成了。</p>
<h2 id="服务消费者"><a href="#服务消费者" class="headerlink" title="服务消费者"></a>服务消费者</h2><p>再新建一个maven工程，作为服务消费者。</p>
<h3 id="pom-xml-1"><a href="#pom-xml-1" class="headerlink" title="pom.xml"></a>pom.xml</h3><p>消费者引入之前服务提供者的服务(这里引用了整个项目，实际中项目会分层，只需引用对应的service层即可)。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;dependency&gt;</div><div class="line">  &lt;groupId&gt;org.news&lt;/groupId&gt;</div><div class="line">  &lt;artifactId&gt;news&lt;/artifactId&gt;</div><div class="line">  &lt;version&gt;$&#123;news.version&#125;&lt;/version&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure></p>
<p>服务提供者对应的工程信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;groupId&gt;org.news&lt;/groupId&gt;</div><div class="line">&lt;artifactId&gt;news&lt;/artifactId&gt;</div><div class="line">&lt;packaging&gt;war&lt;/packaging&gt;</div><div class="line">&lt;version&gt;0.0.1&lt;/version&gt;</div></pre></td></tr></table></figure></p>
<h3 id="spring-dubbo-xml-1"><a href="#spring-dubbo-xml-1" class="headerlink" title="spring-dubbo.xml"></a>spring-dubbo.xml</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">   	xmlns:dubbo=&quot;http://code.alibabatech.com/schema/dubbo&quot;</div><div class="line">   	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">						http://www.springframework.org/schema/beans/spring-beans.xsd</div><div class="line">				       	http://code.alibabatech.com/schema/dubbo</div><div class="line">				       	http://code.alibabatech.com/schema/dubbo/dubbo.xsd&quot;&gt;</div><div class="line"></div><div class="line">    &lt;!-- 消费方应用名，用于计算依赖关系，不是匹配条件，不要与提供方一样 --&gt;</div><div class="line">    &lt;dubbo:application name=&quot;dubbo_service_consumer&quot; /&gt;</div><div class="line"></div><div class="line">    &lt;!--使用zookeeper注册中心暴露和发现服务地址 --&gt;</div><div class="line">    &lt;dubbo:registry protocol=&quot;zookeeper&quot; address=&quot;127.0.0.1:2181&quot; /&gt;</div><div class="line"></div><div class="line">    &lt;!-- 生成远程服务代理，可以像使用本地bean一样使用userService --&gt;  </div><div class="line">    &lt;dubbo:reference id=&quot;dubboService&quot; interface=&quot;com.news.service.IDubboService&quot;/&gt;</div><div class="line"></div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure>
<p>这里的”dubbo:application name”虽然说名字不要一样，实际测试一样也没啥问题。。。</p>
<h3 id="TestDubbo-java-1"><a href="#TestDubbo-java-1" class="headerlink" title="TestDubbo.java"></a>TestDubbo.java</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">package test;</div><div class="line"></div><div class="line">import java.io.IOException;</div><div class="line"></div><div class="line">import org.springframework.context.support.ClassPathXmlApplicationContext;</div><div class="line"></div><div class="line">import com.news.service.IDubboService;</div><div class="line"></div><div class="line">/**</div><div class="line"> * TODO</div><div class="line"> *</div><div class="line"> * @author tenny.peng</div><div class="line"> */</div><div class="line">public class TestDubbo &#123;</div><div class="line"></div><div class="line">	public static void main(String[] args) throws IOException &#123;</div><div class="line">		ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(&quot;spring-dubbo.xml&quot;);</div><div class="line">		IDubboService dubboService = (IDubboService) context.getBean(&quot;dubboService&quot;);</div><div class="line">		dubboService.sayHello(&quot;dubbo&quot;);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行TestDubbo.java，可以发现服务提供方的控制台输出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hello: dubbo</div></pre></td></tr></table></figure></p>
<p>说明服务已经被调用成功了。</p>
<h1 id="dubbo管理页面"><a href="#dubbo管理页面" class="headerlink" title="dubbo管理页面"></a>dubbo管理页面</h1><p>网上搜索dubbo控制台页面，下载dubbo-admin.war。<br>自己下载的地址：<a href="http://www.pc6.com/softview/SoftView_468561.html" target="_blank" rel="external">http://www.pc6.com/softview/SoftView_468561.html</a></p>
<h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><p>先把tomcat下的webapps\ROOT目录下内容清空，将war包解压，解压的内容放进ROOT目录下。进入tomcat下的bin目录，运行startup.bat。</p>
<p>运行如果出现类似如下错误<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Caused by: org.springframework.beans.NotWritablePropertyException: Invalid property &apos;URIType&apos; of bean class [com.alibaba.citrus.service.uribroker.uri.GenericURIBroker]: Bean property &apos;URIType&apos; is not writable or has an invalid setter method. Does the parameter type of the setter match the return type of the getter?</div></pre></td></tr></table></figure></p>
<p>因为使用的jdk版本为1.8，不支持dubbo-admin中编写的方法。参考：<a href="http://blog.csdn.net/liutengteng130/article/details/47112683" target="_blank" rel="external">http://blog.csdn.net/liutengteng130/article/details/47112683</a></p>
<p>解决办法可以降低jdk版本到1.7，但是项目都用了1.8，不想单独为它改环境变量。另一个办法是：<br>找到tomcat/bin目录中的setclasspath.bat，修改setclasspath.bat文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">if &quot;&quot;%1&quot;&quot; == &quot;&quot;debug&quot;&quot; goto needJavaHome</div><div class="line"></div><div class="line">set JAVA_HOME=D:\devsoft\Java\jdk1.7.0_71</div><div class="line"></div><div class="line">rem Otherwise either JRE or JDK are fine</div><div class="line">if not &quot;%JRE_HOME%&quot; == &quot;&quot; goto gotJreHome</div><div class="line">if not &quot;%JAVA_HOME%&quot; == &quot;&quot; goto gotJavaHome</div><div class="line">echo Neither the JAVA_HOME nor the JRE_HOME environment variable is defined</div><div class="line">echo At least one of these environment variable is needed to run this program</div><div class="line">goto exit</div></pre></td></tr></table></figure></p>
<p>在合适位置加上这一行：set JAVA_HOME=D:\devsoft\Java\jdk1.7.0_71</p>
<h3 id="查看页面"><a href="#查看页面" class="headerlink" title="查看页面"></a>查看页面</h3><p>启动成功后，浏览器输入<a href="http://localhost:8080/" target="_blank" rel="external">http://localhost:8080/</a> 就可以访问了。</p>
<p>第一次进入要求输入账号密码，默认root/root。</p>
<ul>
<li><p>管理页面<br><img src="/2017/05/04/spring整合dubbo-zookeeper/20170504111203.png" alt="管理页面"></p>
</li>
<li><p>应用页面<br><img src="/2017/05/04/spring整合dubbo-zookeeper/20170504112120.png" alt="应用页面"></p>
</li>
<li><p>提供者页面<br><img src="/2017/05/04/spring整合dubbo-zookeeper/20170504112507.png" alt="提供者页面"></p>
</li>
<li><p>消费者页面<br><img src="/2017/05/04/spring整合dubbo-zookeeper/20170504112642.png" alt="消费者页面"></p>
</li>
<li><p>服务页面<br><img src="/2017/05/04/spring整合dubbo-zookeeper/20170504112741.png" alt="服务页面"></p>
</li>
</ul>
<p>参考博客：<a href="http://www.cnblogs.com/Javame/p/3632473.html" target="_blank" rel="external">http://www.cnblogs.com/Javame/p/3632473.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;dubbo是什么&quot;&gt;&lt;a href=&quot;#dubbo是什么&quot; class=&quot;headerlink&quot; title=&quot;dubbo是什么&quot;&gt;&lt;/a&gt;dubbo是什么&lt;/h1&gt;&lt;p&gt;Dubbo是阿里巴巴公司开源的一个高性能优秀的分布式服务框架，致力于提供高性能和透明化的RP
    
    </summary>
    
      <category term="dubbo" scheme="https://tenny-peng.github.io/categories/dubbo/"/>
    
    
      <category term="spring" scheme="https://tenny-peng.github.io/tags/spring/"/>
    
      <category term="dubbo" scheme="https://tenny-peng.github.io/tags/dubbo/"/>
    
  </entry>
  
  <entry>
    <title>spring加载多个xml遇到的问题</title>
    <link href="https://tenny-peng.github.io/2017/04/27/spring%E5%8A%A0%E8%BD%BD%E5%A4%9A%E4%B8%AAxml%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>https://tenny-peng.github.io/2017/04/27/spring加载多个xml遇到的问题/</id>
    <published>2017-04-27T01:36:25.000Z</published>
    <updated>2017-04-27T02:33:40.069Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题出现"><a href="#问题出现" class="headerlink" title="问题出现"></a>问题出现</h2><p>之前学习spring整合redis，spring整合activemq，单独测试没有问题。后来想把他们一起部署启动，结果报错<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Could not resolve placeholder &apos;redis.maxTotal&apos; in string value &quot;$&#123;redis.maxTotal&#125;&quot;</div></pre></td></tr></table></figure></p>
<h2 id="查找原因"><a href="#查找原因" class="headerlink" title="查找原因"></a>查找原因</h2><p>查了一会找到了原因。因为我的spring-redis.xml和spring-activemq.xml都写了一个<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;context:property-placeholder location=&quot;classpath:conf/xxx.properties&quot; /&gt;</div></pre></td></tr></table></figure></p>
<p>而Spring容器采用反射扫描的发现机制，在探测到Spring容器中有一个org.springframework.beans.factory.config.PropertyPlaceholderConfigurer的Bean就会停止对剩余PropertyPlaceholderConfigurer的扫描。</p>
<p>而<context:property-placeholder>这个基于命名空间的配置，其实内部就是创建一个PropertyPlaceholderConfigurer Bean而已。换句话说，即Spring容器仅允许<strong>最多定义一个</strong>PropertyPlaceholderConfigurer(或<context:property-placeholder>)，其余的会被Spring<strong>忽略</strong>掉（其实Spring如果提供一个警告就好了）。</context:property-placeholder></context:property-placeholder></p>
<p>这样的话，其实就只加载了第一个properties文件，后面的并没有加载，自然也就找不到’redis.maxTotal’了。</p>
<h2 id="尝试解决"><a href="#尝试解决" class="headerlink" title="尝试解决"></a>尝试解决</h2><p>按照网上的办法，去掉每个xml单独的context:property-placeholder，再写一个xml文件一次性加载所有资源文件，并引入之前单独的所有xml文件。</p>
<p>先将web文件的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">context-param&gt;</div><div class="line">	&lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;</div><div class="line">	&lt;param-value&gt;</div><div class="line">        classpath:spring-activemq.xml,</div><div class="line">        classpath:spring-redis.xml</div><div class="line">	&lt;/param-value&gt;</div><div class="line">&lt;/context-param&gt;</div></pre></td></tr></table></figure></p>
<p>改为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">context-param&gt;</div><div class="line">		&lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;</div><div class="line">		&lt;param-value&gt;</div><div class="line">			classpath:applicationContext.xml</div><div class="line">		&lt;/param-value&gt;</div><div class="line">	&lt;/context-param&gt;</div></pre></td></tr></table></figure></p>
<p>编写这个applicationContext.xml如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">	xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</div><div class="line">	xmlns:p=&quot;http://www.springframework.org/schema/p&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">						http://www.springframework.org/schema/beans/spring-beans-3.0.xsd</div><div class="line">						http://www.springframework.org/schema/context</div><div class="line">						http://www.springframework.org/schema/context/spring-context.xsd&quot;&gt;</div><div class="line"></div><div class="line">    &lt;context:property-placeholder location=&quot;classpath:conf/*.properties&quot; /&gt;</div><div class="line"></div><div class="line">	&lt;import resource=&quot;activemq/spring-activemq.xml&quot; /&gt;</div><div class="line"></div><div class="line">	&lt;import resource=&quot;redis/spring-redis.xml&quot; /&gt;</div><div class="line"></div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure></p>
<p>这样部署启动应该就可以了。</p>
<h2 id="新的问题"><a href="#新的问题" class="headerlink" title="新的问题"></a>新的问题</h2><p>按道理应该启动成功，不过我这里又遇到另一个问题<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Cannot convert value of type [org.springframework.data.redis.connection.jedis.JedisConnectionFactory] to required type [javax.jms.ConnectionFactory] for property &apos;connectionFactory&apos;: no matching editors or conversion strategy found</div></pre></td></tr></table></figure></p>
<h2 id="再查原因"><a href="#再查原因" class="headerlink" title="再查原因"></a>再查原因</h2><p>查看自己的spring-redis.xml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;bean id=&quot;connectionFactory&quot; class=&quot;org.springframework.data.redis.connection.jedis.JedisConnectionFactory&quot;</div><div class="line">p:hostName=&quot;$&#123;redis.host&#125;&quot; p:port=&quot;$&#123;redis.port&#125;&quot; p:password=&quot;$&#123;redis.pass&#125;&quot; c:poolConfig-ref=&quot;poolConfig&quot;&gt;</div><div class="line">&lt;/bean&gt;</div><div class="line"></div><div class="line">&lt;bean id=&quot;redisTemplate&quot; class=&quot;org.springframework.data.redis.core.RedisTemplate&quot;&gt;  </div><div class="line">    &lt;property name=&quot;connectionFactory&quot; ref=&quot;connectionFactory&quot; /&gt;</div><div class="line">    &lt;property name=&quot;keySerializer&quot; ref=&quot;keySerializer&quot; /&gt;</div><div class="line">&lt;/bean&gt;</div></pre></td></tr></table></figure></p>
<p>并没有需要’javax.jms.ConnectionFactory’，根据问题在网上搜索，在一篇博客看到了’redis也有个bean叫connectionFactory’的字眼。于是想到自己应该也是bean name重复了。查看spring-activemq.xml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;bean id=&quot;connectionFactory&quot; class=&quot;org.springframework.jms.connection.SingleConnectionFactory&quot;&gt;  </div><div class="line">    &lt;property name=&quot;targetConnectionFactory&quot; ref=&quot;pooledConnectionFactory&quot;/&gt;  </div><div class="line">&lt;/bean&gt;</div><div class="line"></div><div class="line">&lt;!-- Spring提供的JMS工具类，它可以进行消息发送、接收等 --&gt;  </div><div class="line">&lt;bean id=&quot;jmsTemplate&quot; class=&quot;org.springframework.jms.core.JmsTemplate&quot;&gt;  </div><div class="line">    &lt;property name=&quot;connectionFactory&quot; ref=&quot;connectionFactory&quot;/&gt;  </div><div class="line">    &lt;property name=&quot;defaultDestinationName&quot; value=&quot;$&#123;activemq.queue.name&#125;&quot;/&gt;  </div><div class="line">&lt;/bean&gt;</div></pre></td></tr></table></figure></p>
<h2 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h2><p>问题就很明显了，spring-redis.xml和spring-activemq.xml都有connectionFactory这个bean。于是修改了spring-redis.xml中的bean name<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;bean id=&quot;redisConnectionFactory&quot; class=&quot;org.springframework.data.redis.connection.jedis.JedisConnectionFactory&quot;</div><div class="line">p:hostName=&quot;$&#123;redis.host&#125;&quot; p:port=&quot;$&#123;redis.port&#125;&quot; p:password=&quot;$&#123;redis.pass&#125;&quot; c:poolConfig-ref=&quot;poolConfig&quot;&gt;</div><div class="line">&lt;/bean&gt;</div><div class="line"></div><div class="line">&lt;bean id=&quot;redisTemplate&quot; class=&quot;org.springframework.data.redis.core.RedisTemplate&quot;&gt;  </div><div class="line">    &lt;property name=&quot;connectionFactory&quot; ref=&quot;redisConnectionFactory&quot; /&gt;</div><div class="line">    &lt;property name=&quot;keySerializer&quot; ref=&quot;keySerializer&quot; /&gt;</div><div class="line">&lt;/bean&gt;</div></pre></td></tr></table></figure></p>
<p>再次部署启动，OK。</p>
<p>参考博客：<a href="http://www.iteye.com/topic/1131688" target="_blank" rel="external">http://www.iteye.com/topic/1131688</a><br>　　　　　<a href="http://blog.csdn.net/AlbertFly/article/details/51503079" target="_blank" rel="external">http://blog.csdn.net/AlbertFly/article/details/51503079</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;问题出现&quot;&gt;&lt;a href=&quot;#问题出现&quot; class=&quot;headerlink&quot; title=&quot;问题出现&quot;&gt;&lt;/a&gt;问题出现&lt;/h2&gt;&lt;p&gt;之前学习spring整合redis，spring整合activemq，单独测试没有问题。后来想把他们一起部署启动，结果报错&lt;
    
    </summary>
    
      <category term="spring" scheme="https://tenny-peng.github.io/categories/spring/"/>
    
    
      <category term="spring" scheme="https://tenny-peng.github.io/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>spring的MessageSource</title>
    <link href="https://tenny-peng.github.io/2017/04/25/spring%E7%9A%84MessageSource/"/>
    <id>https://tenny-peng.github.io/2017/04/25/spring的MessageSource/</id>
    <published>2017-04-25T06:17:54.000Z</published>
    <updated>2017-04-25T09:14:10.935Z</updated>
    
    <content type="html"><![CDATA[<h2 id="spring-message-xml"><a href="#spring-message-xml" class="headerlink" title="spring-message.xml"></a>spring-message.xml</h2><p>配置messageSource路径。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;bean id=&quot;messageSource&quot;</div><div class="line">    class=&quot;org.springframework.context.support.ReloadableResourceBundleMessageSource&quot;&gt;</div><div class="line">    &lt;property name=&quot;basenames&quot;&gt;</div><div class="line">        &lt;list&gt;</div><div class="line">            &lt;value&gt;classpath:message/message&lt;/value&gt;</div><div class="line">        &lt;/list&gt;</div><div class="line">    &lt;/property&gt;</div><div class="line">    &lt;property name=&quot;defaultEncoding&quot; value=&quot;UTF-8&quot;/&gt;</div><div class="line">&lt;/bean&gt;</div><div class="line"></div><div class="line">&lt;bean id=&quot;messageHelper&quot; class=&quot;com.news.common.utils.MessageHelper&quot;&gt;</div><div class="line">    &lt;property name=&quot;messageSource&quot; ref=&quot;messageSource&quot;/&gt;</div><div class="line">&lt;/bean&gt;</div></pre></td></tr></table></figure></p>
<h2 id="MessageHelper"><a href="#MessageHelper" class="headerlink" title="MessageHelper"></a>MessageHelper</h2><p>信息工具类，通过spring注入。核心是上面配置的messageSource，可针对不同地区/国家加载不同的信息文件(message.properties)。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">import java.util.Locale;</div><div class="line"></div><div class="line">import org.springframework.context.MessageSource;</div><div class="line"></div><div class="line">public class MessageHelper &#123;</div><div class="line"></div><div class="line">	private static MessageSource messageSource;</div><div class="line"></div><div class="line">	public static void setMessageSource(MessageSource messageSource) &#123;</div><div class="line">		MessageHelper.messageSource = messageSource;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public static String getMessage(String code) &#123;</div><div class="line">		return getMessage(code, null);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public static String getMessage(String code, Object[] args) &#123;</div><div class="line">		return messageSource.getMessage(code, args, Locale.getDefault());</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public static String getMessage(String code, Object[] args, Locale locale) &#123;</div><div class="line">		return messageSource.getMessage(code, args, locale);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="message-zh-CN-properties-amp-message-en-US-properties"><a href="#message-zh-CN-properties-amp-message-en-US-properties" class="headerlink" title="message_zh_CN.properties &amp; message_en_US.properties"></a>message_zh_CN.properties &amp; message_en_US.properties</h2><p>message_zh_CN，针对中文语言环境。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">#用户提示</div><div class="line">u0001=用户名或密码不能为空！</div><div class="line">u0002=用户名&quot;&#123;0&#125;&quot;已存在！</div><div class="line">u0003=用户名或密码错误！</div></pre></td></tr></table></figure></p>
<p>message_en_US.properties，针对英文(国际)语言环境。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">#user tips</div><div class="line">u0001=username or password cannot be null!</div><div class="line">u0002=username &quot;&#123;0&#125;&quot; is already exist！</div><div class="line">u0003=username or password is error!</div></pre></td></tr></table></figure></p>
<h2 id="TestMeaage-java"><a href="#TestMeaage-java" class="headerlink" title="TestMeaage.java"></a>TestMeaage.java</h2><p>使用默认本地语言环境(中文)和指定语言环境(英文)分别测试。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">import java.util.Locale;</div><div class="line"></div><div class="line">import org.springframework.context.support.ClassPathXmlApplicationContext;</div><div class="line"></div><div class="line">import com.news.common.utils.MessageHelper;</div><div class="line"></div><div class="line">/**</div><div class="line"> * TODO</div><div class="line"> *</div><div class="line"> * @author tenny.peng</div><div class="line"> */</div><div class="line">public class TestMessage &#123;</div><div class="line"></div><div class="line">	public static void main(String[] args) &#123;</div><div class="line">		ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(&quot;spring-message.xml&quot;);</div><div class="line"></div><div class="line">		System.out.println(MessageHelper.getMessage(&quot;u0001&quot;));</div><div class="line">		System.out.println(MessageHelper.getMessage(&quot;u0002&quot;, new String[] &#123; &quot;tenny&quot; &#125;));</div><div class="line">		System.out.println(MessageHelper.getMessage(&quot;u0003&quot;));</div><div class="line"></div><div class="line">		System.out.println(MessageHelper.getMessage(&quot;u0001&quot;, null, Locale.US));</div><div class="line">		System.out.println(MessageHelper.getMessage(&quot;u0002&quot;, new String[] &#123; &quot;tenny&quot; &#125;, Locale.US));</div><div class="line">		System.out.println(MessageHelper.getMessage(&quot;u0003&quot;, null, Locale.US));</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>输出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">用户名或密码不能为空！</div><div class="line">用户名&quot;tenny&quot;已存在！</div><div class="line">用户名或密码错误！</div><div class="line">username or password cannot be null!</div><div class="line">username &quot;tenny&quot; is already exist!</div><div class="line">username or password is error!</div></pre></td></tr></table></figure></p>
<h2 id="方法说明"><a href="#方法说明" class="headerlink" title="方法说明"></a>方法说明</h2><p>messageSource.getMessage(code, args, locale)有三个参数：</p>
<ol>
<li><p>消息的编码值；</p>
</li>
<li><p>对应消息的参数，没有就传null；</p>
</li>
<li><p>java.util.Locale参数。locale为null时，根据使用者的语言环境决定Locale，从而决定要加载的message文件。<br> 上面的测试先后加载了messages_zh_CN.properties和message_en_US.properties资源文件。<br> 这其中还有一个控制点在JVM，JVM会根据当前操作系统的语言环境进行相应处理，我们可以通过在JVM启动参数中追加“-Duser.lang ge=zh_TW”来设定当前JVM语言类型，通过JVM级的设定，也可以实现自动切换所使用的资源文件类型。<br> 所以这里面的控制语言的方式有三种：从最低层的操作系统的Locale设定，到更上一层的JVM的Locale设定，再到程序一级的Locale设定。</p>
</li>
</ol>
<p>参考博客：<a href="http://lixiaorong223.blog.163.com/blog/static/4401162920110106305224/" target="_blank" rel="external">http://lixiaorong223.blog.163.com/blog/static/4401162920110106305224/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;spring-message-xml&quot;&gt;&lt;a href=&quot;#spring-message-xml&quot; class=&quot;headerlink&quot; title=&quot;spring-message.xml&quot;&gt;&lt;/a&gt;spring-message.xml&lt;/h2&gt;&lt;p&gt;配置mess
    
    </summary>
    
      <category term="MessageSource" scheme="https://tenny-peng.github.io/categories/MessageSource/"/>
    
    
      <category term="spring" scheme="https://tenny-peng.github.io/tags/spring/"/>
    
      <category term="MessageSource" scheme="https://tenny-peng.github.io/tags/MessageSource/"/>
    
  </entry>
  
  <entry>
    <title>spring整合activemq</title>
    <link href="https://tenny-peng.github.io/2017/04/24/spring%E6%95%B4%E5%90%88activemq/"/>
    <id>https://tenny-peng.github.io/2017/04/24/spring整合activemq/</id>
    <published>2017-04-24T09:04:50.000Z</published>
    <updated>2017-04-25T02:27:19.680Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-安装activemq"><a href="#1-安装activemq" class="headerlink" title="1.安装activemq"></a>1.安装activemq</h2><p>到<a href="http://activemq.apache.org/" target="_blank" rel="external">http://activemq.apache.org/</a> 下载最新版。我这里下载的是Windows版。</p>
<p>下载完成之后解压缩，运行bin目录下的activemq.bat，看到类似如下信息说明启动成功。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">ACTIVEMQ_HOME: D:\devsoft\apache-activemq-5.1.0\bin\..</div><div class="line">ACTIVEMQ_BASE: D:\devsoft\apache-activemq-5.1.0\bin\..</div><div class="line">Loading message broker from: xbean:activemq.xml</div><div class="line">INFO  BrokerService                  - Using Persistence Adapter: AMQPersistenceAdapter(D:\devsoft\apache-activemq-5.1.0\bin\..\data)</div><div class="line">INFO  BrokerService                  - ActiveMQ 5.1.0 JMS Message Broker (localhost) is starting</div><div class="line">INFO  BrokerService                  - For help or more information please see: http://activemq.apache.org/</div><div class="line">INFO  AMQPersistenceAdapter          - AMQStore starting using directory: D:\devsoft\apache-activemq-5.1.0\bin\..\data</div><div class="line">INFO  KahaStore                      - Kaha Store using data directory D:\devsoft\apache-activemq-5.1.0\bin\..\data\kr-store\state</div><div class="line">INFO  AMQPersistenceAdapter          - Active data files: []</div><div class="line">WARN  AMQPersistenceAdapter          - The ReferenceStore is not valid - recovering ...</div><div class="line">INFO  KahaStore                      - Kaha Store successfully deleted data directory D:\devsoft\apache-activemq-5.1.0\bin\..\data\kr-store\data</div><div class="line">INFO  AMQPersistenceAdapter          - Journal Recovery Started from: DataManager:(data-)</div><div class="line">INFO  KahaStore                      - Kaha Store using data directory D:\devsoft\apache-activemq-5.1.0\bin\..\data\kr-store\data</div><div class="line">INFO  AMQPersistenceAdapter          - Recovered 3611 operations from redo log in 0.85 seconds.</div><div class="line">INFO  AMQPersistenceAdapter          - Finished recovering the ReferenceStore</div><div class="line">INFO  TransportServerThreadSupport   - Listening for connections at: tcp://Lenovo-PC:61616</div><div class="line">INFO  TransportConnector             - Connector openwire Started</div><div class="line">INFO  TransportServerThreadSupport   - Listening for connections at: ssl://Lenovo-PC:61617</div><div class="line">INFO  TransportConnector             - Connector ssl Started</div><div class="line">INFO  TransportServerThreadSupport   - Listening for connections at: stomp://Lenovo-PC:61613</div><div class="line">INFO  TransportConnector             - Connector stomp Started</div><div class="line">INFO  TransportServerThreadSupport   - Listening for connections at: xmpp://Lenovo-PC:61222</div><div class="line">INFO  TransportConnector             - Connector xmpp Started</div><div class="line">INFO  NetworkConnector               - Network Connector default-nc Started</div><div class="line">INFO  BrokerService                  - ActiveMQ JMS Message Broker (localhost, ID:Lenovo-PC-51314-1493018577517-0:0) started</div><div class="line">INFO  log                            - Logging to org.slf4j.impl.JCLLoggerAdapter(org.mortbay.log) via org.mortbay.log.Slf4jLog</div><div class="line">INFO  log                            - jetty-6.1.9</div><div class="line">INFO  WebConsoleStarter              - ActiveMQ WebConsole initialized.</div><div class="line">INFO  /admin                         - Initializing Spring FrameworkServlet &apos;dispatcher&apos;</div><div class="line">INFO  log                            - ActiveMQ Console at http://0.0.0.0:8161/admin</div><div class="line">INFO  log                            - ActiveMQ Web Demos at http://0.0.0.0:8161/demo</div><div class="line">INFO  log                            - RESTful file access application at http://0.0.0.0:8161/fileserver</div><div class="line">INFO  log                            - Started SelectChannelConnector@0.0.0.0:8161</div><div class="line">INFO  FailoverTransport              - Successfully connected to tcp://localhost:61616</div><div class="line">INFO  TransportConnector             - Connector vm://localhost Started</div></pre></td></tr></table></figure></p>
<p>浏览器输入<a href="http://localhost:8161/admin/" target="_blank" rel="external">http://localhost:8161/admin/</a> 可查看本地activemq运行状态。<br><img src="/2017/04/24/spring整合activemq/20170424171757.png" alt="activemq主页"></p>
<p>点击”Queues”可查看队列情况。现在没有信息，后面测试的时候会有信息。<br><img src="/2017/04/24/spring整合activemq/20170424172009.png" alt="activemq空queues"></p>
<h2 id="2-Maven添加依赖"><a href="#2-Maven添加依赖" class="headerlink" title="2.Maven添加依赖"></a>2.Maven添加依赖</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;dependency&gt;</div><div class="line">  &lt;groupId&gt;org.springframework&lt;/groupId&gt;</div><div class="line">  &lt;artifactId&gt;spring-jms&lt;/artifactId&gt;</div><div class="line">  &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</div><div class="line">&lt;/dependency&gt;</div><div class="line">&lt;dependency&gt;  </div><div class="line">  &lt;groupId&gt;org.apache.activemq&lt;/groupId&gt;  </div><div class="line">  &lt;artifactId&gt;activemq-core&lt;/artifactId&gt;  </div><div class="line">  &lt;version&gt;5.7.0&lt;/version&gt;  </div><div class="line">&lt;/dependency&gt;</div><div class="line">&lt;dependency&gt;</div><div class="line">  &lt;groupId&gt;org.apache.activemq&lt;/groupId&gt;</div><div class="line">  &lt;artifactId&gt;activemq-pool&lt;/artifactId&gt;</div><div class="line">  &lt;version&gt;5.7.0&lt;/version&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure>
<h2 id="3-activemp-properties属性文件"><a href="#3-activemp-properties属性文件" class="headerlink" title="3.activemp.properties属性文件"></a>3.activemp.properties属性文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># 服务器地址</div><div class="line">activemq.brokerURL=tcp://localhost:61616</div><div class="line"></div><div class="line"># 连接池的最大连接数</div><div class="line">activemq.maxConnections=10</div><div class="line"></div><div class="line"># 目的队列的名称</div><div class="line">activemq.queue.name=tenny:test</div></pre></td></tr></table></figure>
<h2 id="4-spring-activemq-xml配置文件"><a href="#4-spring-activemq-xml配置文件" class="headerlink" title="4.spring-activemq.xml配置文件"></a>4.spring-activemq.xml配置文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;  </div><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;  </div><div class="line">    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">    xmlns:context=&quot;http://www.springframework.org/schema/context&quot;  </div><div class="line">    xmlns:jms=&quot;http://www.springframework.org/schema/jms&quot;  </div><div class="line">    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">						http://www.springframework.org/schema/beans/spring-beans.xsd</div><div class="line">						http://www.springframework.org/schema/context</div><div class="line">						http://www.springframework.org/schema/context/spring-context.xsd  </div><div class="line">						http://www.springframework.org/schema/beans</div><div class="line">						http://www.springframework.org/schema/beans/spring-beans.xsd  </div><div class="line">						http://www.springframework.org/schema/jms</div><div class="line">						http://www.springframework.org/schema/jms/spring-jms.xsd&quot;&gt;</div><div class="line"></div><div class="line">    &lt;context:property-placeholder location=&quot;classpath:activemq.properties&quot; /&gt;</div><div class="line"></div><div class="line">	&lt;!-- 真正可以产生Connection的ConnectionFactory，由对应的 JMS服务厂商提供--&gt;  </div><div class="line">	&lt;bean id=&quot;targetConnectionFactory&quot; class=&quot;org.apache.activemq.ActiveMQConnectionFactory&quot;&gt;  </div><div class="line">	    &lt;property name=&quot;brokerURL&quot; value=&quot;$&#123;activemq.brokerURL&#125;&quot;/&gt;  </div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;pooledConnectionFactory&quot; class=&quot;org.apache.activemq.pool.PooledConnectionFactory&quot; destroy-method=&quot;stop&quot;&gt;  </div><div class="line">	    &lt;property name=&quot;connectionFactory&quot; ref=&quot;targetConnectionFactory&quot;/&gt;  </div><div class="line">	    &lt;property name=&quot;maxConnections&quot; value=&quot;$&#123;activemq.maxConnections&#125;&quot;/&gt;  </div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">	&lt;bean id=&quot;connectionFactory&quot; class=&quot;org.springframework.jms.connection.SingleConnectionFactory&quot;&gt;  </div><div class="line">	    &lt;property name=&quot;targetConnectionFactory&quot; ref=&quot;pooledConnectionFactory&quot;/&gt;  </div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">	&lt;!-- Spring提供的JMS工具类，它可以进行消息发送、接收等 --&gt;  </div><div class="line">	&lt;bean id=&quot;jmsTemplate&quot; class=&quot;org.springframework.jms.core.JmsTemplate&quot;&gt;  </div><div class="line">	    &lt;property name=&quot;connectionFactory&quot; ref=&quot;connectionFactory&quot;/&gt;  </div><div class="line">	    &lt;property name=&quot;defaultDestinationName&quot; value=&quot;$&#123;activemq.queue.name&#125;&quot;/&gt;  </div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">	&lt;!--队列目的地，点对点模式--&gt;  </div><div class="line">	&lt;bean id=&quot;queueDestination&quot; class=&quot;org.apache.activemq.command.ActiveMQQueue&quot;&gt;  </div><div class="line">	    &lt;constructor-arg&gt;</div><div class="line">	        &lt;value&gt;</div><div class="line">	            $&#123;activemq.queue.name&#125;</div><div class="line">	        &lt;/value&gt;</div><div class="line">	    &lt;/constructor-arg&gt;  </div><div class="line">	&lt;/bean&gt;</div><div class="line"></div><div class="line">	&lt;!-- 消息监听器 --&gt;  </div><div class="line">	&lt;bean id=&quot;activeMQMessageListener&quot; class=&quot;com.news.common.activemq.ActiveMQMessageListener&quot; /&gt;      </div><div class="line"></div><div class="line">	&lt;!-- 消息监听容器 --&gt;</div><div class="line">	&lt;bean id=&quot;jmsContainer&quot; class=&quot;org.springframework.jms.listener.DefaultMessageListenerContainer&quot;&gt;  </div><div class="line">	    &lt;property name=&quot;connectionFactory&quot; ref=&quot;connectionFactory&quot; /&gt;  </div><div class="line">	    &lt;property name=&quot;destination&quot; ref=&quot;queueDestination&quot; /&gt;  </div><div class="line">	    &lt;property name=&quot;messageListener&quot; ref=&quot;activeMQMessageListener&quot; /&gt;  </div><div class="line">	&lt;/bean&gt;</div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure>
<p>  其中的ActiveMQMessageListener<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">package com.news.common.activemq;</div><div class="line"></div><div class="line">import javax.jms.JMSException;</div><div class="line">import javax.jms.Message;</div><div class="line">import javax.jms.MessageListener;</div><div class="line">import javax.jms.TextMessage;</div><div class="line"></div><div class="line">/**</div><div class="line"> *</div><div class="line"> * activemq消息监听</div><div class="line"> *</div><div class="line"> * @author Tenny.Peng</div><div class="line"> */</div><div class="line">public class ActiveMQMessageListener implements MessageListener &#123;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public void onMessage(Message message) &#123;</div><div class="line">		TextMessage textMsg = (TextMessage) message;</div><div class="line">		try &#123;</div><div class="line">			// 处理消息</div><div class="line">			System.out.println(&quot;receive message from &quot; + textMsg.getJMSDestination() + &quot;: &quot; + textMsg.getText());</div><div class="line">		&#125; catch (JMSException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="5-测试类TestActivemq-java"><a href="#5-测试类TestActivemq-java" class="headerlink" title="5.测试类TestActivemq.java"></a>5.测试类TestActivemq.java</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">package news;</div><div class="line"></div><div class="line">import javax.jms.JMSException;</div><div class="line">import javax.jms.Message;</div><div class="line">import javax.jms.Session;</div><div class="line"></div><div class="line">import org.springframework.context.support.ClassPathXmlApplicationContext;</div><div class="line">import org.springframework.jms.core.JmsTemplate;</div><div class="line">import org.springframework.jms.core.MessageCreator;</div><div class="line"></div><div class="line">/**</div><div class="line"> * TODO</div><div class="line"> *</div><div class="line"> * @author tenny.peng</div><div class="line"> */</div><div class="line">public class TestActivemq &#123;</div><div class="line"></div><div class="line">	public static void main(String[] args) &#123;</div><div class="line">		@SuppressWarnings(&quot;resource&quot;)</div><div class="line">		ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(&quot;spring-activemq.xml&quot;);</div><div class="line">		JmsTemplate jmsTemplate = (JmsTemplate) context.getBean(&quot;jmsTemplate&quot;);</div><div class="line">		final String destinationName = jmsTemplate.getDefaultDestinationName();</div><div class="line">		jmsTemplate.send(destinationName, new MessageCreator() &#123;</div><div class="line"></div><div class="line">			@Override</div><div class="line">			public Message createMessage(Session session) throws JMSException &#123;</div><div class="line">				// 消息对象</div><div class="line">				String message = &quot;some information...&quot;;</div><div class="line">				return session.createTextMessage(message);</div><div class="line">			&#125;</div><div class="line">		&#125;);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="6-测试"><a href="#6-测试" class="headerlink" title="6.测试"></a>6.测试</h2><p>运行一次TestActivemq.java，控制台输出如下，监听器已收到消息。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">receive message from queue://tenny:test: some information...</div></pre></td></tr></table></figure></p>
<p>查看Queues界面。没有待处理消息，有1个消费者，已发送/接收了1条信息。<br><img src="/2017/04/24/spring整合activemq/20170424174645.png" alt="Queues一条消息"></p>
<p>之前的控制台不要关，再运行一次TestActivemq.java，之前的控制台输出如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">receive message from queue://tenny:test: some information...</div></pre></td></tr></table></figure></p>
<p>说明之前的监听器又收到了消息。</p>
<p>再查看Queues界面。有2个消费者，已发送/接收了2条消息。<br><img src="/2017/04/24/spring整合activemq/20170424175147.png" alt="Queues两条消息"></p>
<p>还是不关控制台，修改TestActivemq.java中发送消息的destinationName<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">jmsTemplate.send(&quot;panda&quot;, new MessageCreator()</div></pre></td></tr></table></figure></p>
<p>再运行TestActivemq.java，控制台没有任何输出，再查看Queues<br><img src="/2017/04/24/spring整合activemq/20170424175850.png" alt="Queues额外队列"></p>
<p>可以看到有一条待处理消息，没有消费者，发出1条消息，接收0条消息。</p>
<p>这里tenny:test队列的消费者有3个，因为之前启动的监听器都是针对队列tenny:test的，并没有监听这个新的panda队列。</p>
<p>修改activemq.properties<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># 目的队列的名称</div><div class="line">activemq.queue.name=panda</div></pre></td></tr></table></figure></p>
<p>再运行TestActivemq.java，可以看到控制台输出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">receive message from queue://panda: some information...</div><div class="line">receive message from queue://panda: some information...</div></pre></td></tr></table></figure></p>
<p>说明这次启动的监听器收到了之前的和当前的消息。</p>
<p>再查看Queues界面，新的队列panda也有一个消费者，发送2条，接收2条(即刚才启动的针对队列panda的监听器接收)。<br><img src="/2017/04/24/spring整合activemq/20170425094743.png" alt="Queues新消费者"></p>
<h2 id="7-总结"><a href="#7-总结" class="headerlink" title="7.总结"></a>7.总结</h2><ul>
<li><p>消息按队列区分(如这里的tenny:test和panda)，每一个队列有生产者(发送消息)和消费者(接收消息)。当没有消费者的时候，生成者的消息就暂时悬挂起来，一旦有消费者空闲，就会接收消息。</p>
</li>
<li><p>在测试中，已启动两次TestActivemq.java后，不修改测试代码，继续运行多次TestActivemq.java。可以发现，每次运行后，发送的消息都是由之前的多个监听器随机接收。</p>
</li>
<li><p>这里测试直接使用了jmsTemplate，实际应用中，应该写一个service，将jmsTemplate作为私有变量，通过spring注入。然后根据业务封装自己发送的消息。</p>
</li>
<li><p>可以为每个业务模块配置单独的activemq.properties，编写对应的生产者service和监听器。每个模块的消息互不干扰。</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-安装activemq&quot;&gt;&lt;a href=&quot;#1-安装activemq&quot; class=&quot;headerlink&quot; title=&quot;1.安装activemq&quot;&gt;&lt;/a&gt;1.安装activemq&lt;/h2&gt;&lt;p&gt;到&lt;a href=&quot;http://activemq.apac
    
    </summary>
    
      <category term="activemq" scheme="https://tenny-peng.github.io/categories/activemq/"/>
    
    
      <category term="spring" scheme="https://tenny-peng.github.io/tags/spring/"/>
    
      <category term="activemq" scheme="https://tenny-peng.github.io/tags/activemq/"/>
    
  </entry>
  
  <entry>
    <title>hexo+github搭建博客</title>
    <link href="https://tenny-peng.github.io/2017/04/21/hexo+github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>https://tenny-peng.github.io/2017/04/21/hexo+github搭建博客/</id>
    <published>2017-04-21T06:07:53.000Z</published>
    <updated>2017-04-21T09:35:03.311Z</updated>
    
    <content type="html"><![CDATA[<p>Hexo是一款基于Node.js的静态博客框架，配合github可以搭建属于自己的博客。</p>
<h1 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h1><h2 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h2><p>Hexo需要node.js支持，可以到<a href="http://nodejs.cn/download/" target="_blank" rel="external">node.js中文网</a>下载适合自己系统的安装包。安装也比较简单，一路next下去就可以了。</p>
<p>安装完后win + r 输入cmd回车，打开命令行界面，分别输入node -v 和nmp -v，看到类似如下结果就说明安装成功了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt;node -v</div><div class="line">v6.10.1</div><div class="line">&gt;nmp -v</div><div class="line">3.10.10</div></pre></td></tr></table></figure></p>
<h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p>在合适的地方建立一个文件夹，用于安装hexo框架和存放你的博客。我的文件夹是D:\devsoft\hexo。</p>
<p>命令行切换到hexo目录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">C:\Users\tenny&gt;d:</div><div class="line"></div><div class="line">D:\&gt;cd devsoft</div><div class="line"></div><div class="line">D:\devsoft&gt;cd hexo</div><div class="line"></div><div class="line">D:\devsoft\hexo&gt;</div></pre></td></tr></table></figure></p>
<p>输入如下命令安装hexo到当前目录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-cli -g</div></pre></td></tr></table></figure></p>
<p>命令行显示一系列安装详情，等待片刻，完成后，继续输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo --save</div></pre></td></tr></table></figure></p>
<p>又会看到一堆信息，完成后，输入hexo -v检查下，看到类似如下信息，说明安装成功了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">D:\devsoft\hexo&gt;hexo -v</div><div class="line">hexo: 3.2.2</div><div class="line">hexo-cli: 1.0.2</div><div class="line">os: Windows_NT 10.0.14393 win32 x64</div><div class="line">http_parser: 2.7.0</div><div class="line">node: 6.10.1</div><div class="line">v8: 5.1.281.95</div><div class="line">uv: 1.9.1</div><div class="line">zlib: 1.2.8</div><div class="line">ares: 1.10.1-DEV</div><div class="line">icu: 58.2</div><div class="line">modules: 48</div><div class="line">openssl: 1.0.2k</div></pre></td></tr></table></figure></p>
<h2 id="配置Hexo"><a href="#配置Hexo" class="headerlink" title="配置Hexo"></a>配置Hexo</h2><p>命令行还在hexo根目录，输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo init</div></pre></td></tr></table></figure></p>
<p>继续输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm -install</div></pre></td></tr></table></figure></p>
<p>npm会自动安装需要的组件。之后输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-deployer-git --save</div></pre></td></tr></table></figure></p>
<p>hexo扩展，用于将博客发布到github上。</p>
<h1 id="体验博客"><a href="#体验博客" class="headerlink" title="体验博客"></a>体验博客</h1><h2 id="本地博客"><a href="#本地博客" class="headerlink" title="本地博客"></a>本地博客</h2><p>继续输入hexo g生成文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">D:\devsoft\hexo&gt;hexo g</div><div class="line">INFO  Start processing</div><div class="line">INFO  Files loaded in 2.28 s</div><div class="line">INFO  Generated: search.xml</div><div class="line">INFO  Generated: sitemap.xml</div><div class="line">INFO  Generated: atom.xml</div><div class="line">INFO  Generated: index.html</div><div class="line">INFO  Generated: categories/index.html</div><div class="line">INFO  Generated: about/index.html</div><div class="line">INFO  Generated: tags/index.html</div><div class="line">INFO  Generated: archives/index.html</div><div class="line">INFO  Generated: favicon.ico</div><div class="line">INFO  Generated: archives/2017/04/index.html</div><div class="line">......   //省略的文件信息</div></pre></td></tr></table></figure></p>
<p>再输入hexo s启动服务<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">D:\devsoft\hexo&gt;hexo s</div><div class="line">INFO  Start processing</div><div class="line">INFO  Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.</div></pre></td></tr></table></figure></p>
<p>在浏览器中输入<a href="http://localhost:4000/" target="_blank" rel="external">http://localhost:4000/</a> 就可以看到博客首页了。</p>
<p>要停止服务，在命令行按Ctrl + C。</p>
<h2 id="建立博客仓库"><a href="#建立博客仓库" class="headerlink" title="建立博客仓库"></a>建立博客仓库</h2><p>进入<a href="https://github.com/" target="_blank" rel="external">https://github.com/</a> 登录自己的账号，新建一个仓库，命名为yourname.github.io(这个就是你博客的访问地址，一定要这种格式，否则无效)。例如我的tenny-peng.github.io。</p>
<p>关于安装git和github可以参考我的<a href="../../03/Git简单教程/index.html">Git简单教程</a>，这里就略过了。</p>
<p>建立好自己的博客仓库(yourname.github.io)后，打开hexo根目录下的_config.yml，找到Deployment，修改成如下内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># Deployment</div><div class="line">## Docs: https://hexo.io/docs/deployment.html</div><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">  repo: git@github.com:yourname/yourname.github.io.git</div><div class="line">  branch: master</div></pre></td></tr></table></figure></p>
<p>例如我的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># Deployment</div><div class="line">## Docs: https://hexo.io/docs/deployment.html</div><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">  repo: git@github.com:tenny-peng/tenny-peng.github.io.git</div><div class="line">  branch: master</div></pre></td></tr></table></figure></p>
<h2 id="编写博客"><a href="#编写博客" class="headerlink" title="编写博客"></a>编写博客</h2><p>hexo根目录下执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo new title &quot;test&quot;</div></pre></td></tr></table></figure></p>
<p>然后在D:\devsoft\hexo\source_posts下就能看到test.md文件了。</p>
<p>.md文件是用MarkDown语法写的，关于MarkDown语法，可以参考我的<a href="../../03/MarkDown基础语法/index.html">MarkDown基础语法</a>。<br>MarkDown文件编辑器推荐用Atom，Atom是Github专门为程序员推出的一个跨平台文本编辑器。可以到<a href="https://atom.io/" target="_blank" rel="external">https://atom.io/</a> 下载Atom，也可以找寻其他自己喜欢的MarkDown编辑器。</p>
<h2 id="部署博客"><a href="#部署博客" class="headerlink" title="部署博客"></a>部署博客</h2><p>文章编辑完后，使用命令生成，部署<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo g      //生成静态文件</div><div class="line">hexo d      //部署到github上</div></pre></td></tr></table></figure></p>
<p>也可以直接执行以下命令，相当于上面两条命令一起执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo d -g     //部署前先生成</div></pre></td></tr></table></figure></p>
<p>部署完成后，访问<a href="https://yourname.github.io" target="_blank" rel="external">https://yourname.github.io</a> (例如我的<a href="https://tenny-peng.github.io">https://tenny-peng.github.io</a>) ，就可以看到生成的文章。</p>
<h1 id="使用主题"><a href="#使用主题" class="headerlink" title="使用主题"></a>使用主题</h1><p>主题可以使我们的博客更加个性化，更加美观，等等。<br>这里我使用了NexT主题，其他主题配置可参考其说明，下面以NexT为例。</p>
<h2 id="安装NexT"><a href="#安装NexT" class="headerlink" title="安装NexT"></a>安装NexT</h2><p>Hexo 安装主题的方式非常简单，只需要将主题文件拷贝至站点目录的 themes 目录下， 然后修改下配置文件即可。</p>
<p>如果你熟悉Git，建议你使用克隆最新版本的方式，之后的更新可以通过git pull来快速更新，而不用再次下载压缩包替换。这里我们使用git。</p>
<p>命令行切换到hexo根目录，执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone https://github.com/iissnan/hexo-theme-next themes/next</div></pre></td></tr></table></figure></p>
<h2 id="启用主题"><a href="#启用主题" class="headerlink" title="启用主题"></a>启用主题</h2><p>找到hexo根目录下的站点配置文件_config.yml，修改theme<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">theme: next</div></pre></td></tr></table></figure></p>
<h2 id="设定Scheme"><a href="#设定Scheme" class="headerlink" title="设定Scheme"></a>设定Scheme</h2><p>Scheme 是 NexT 提供的一种特性，借助于 Scheme，NexT 为你提供多种不同的外观。同时，几乎所有的配置都可以 在 Scheme 之间共用。目前 NexT 支持三种 Scheme，他们是：</p>
<ul>
<li>Muse - 默认 Scheme，这是 NexT 最初的版本，黑白主调，大量留白</li>
<li>Mist - Muse 的紧凑版本，整洁有序的单栏外观</li>
<li>Pisces - 双栏 Scheme，小家碧玉似的清新</li>
</ul>
<p>找到主题next目录下的_config.yml(<strong>注意</strong>：不是hexo根目录下的配置文件，根目录下的是全局博客配置，这个是针对某个主题的配置)，设定自己喜欢的Scheme，使用的去掉#，不使用的注释#。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># ---------------------------------------------------------------</div><div class="line"># Scheme Settings</div><div class="line"># ---------------------------------------------------------------</div><div class="line"></div><div class="line"># Schemes</div><div class="line">#scheme: Muse</div><div class="line">#scheme: Mist</div><div class="line">scheme: Pisces</div></pre></td></tr></table></figure></p>
<h2 id="站点设置"><a href="#站点设置" class="headerlink" title="站点设置"></a>站点设置</h2><p>编辑站点配置文件，设置博客标题，作者，语言等，更多配置可自行查询。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># Site</div><div class="line">title: Tenny&apos;s Blog</div><div class="line">author: Tenny Peng</div><div class="line">language: zh-Hans     //简体中文</div></pre></td></tr></table></figure></p>
<h2 id="菜单配置"><a href="#菜单配置" class="headerlink" title="菜单配置"></a>菜单配置</h2><p>编辑主题配置文件，设置首页分类标签等目录，更多配置可自行查询。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">menu:</div><div class="line">  home: /</div><div class="line">  categories: /categories</div><div class="line">  about: /about</div><div class="line">  archives: /archives</div><div class="line">  tags: /tags</div></pre></td></tr></table></figure></p>
<p>这里设定的目录都必须手动创建在hexo/source目录下，否则发布到github上是找不到的。</p>
<h2 id="头像设置"><a href="#头像设置" class="headerlink" title="头像设置"></a>头像设置</h2><p>编辑主题配置文件，修改avatar(如没有可新建)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">avatar: /images/avatar.jpg</div></pre></td></tr></table></figure></p>
<p>这里的图片需要放在主题目录下(themes/next/source/images/avatar.jpg)，而不是站点目录。</p>
<h2 id="网站图标"><a href="#网站图标" class="headerlink" title="网站图标"></a>网站图标</h2><p>编辑主图配置文件，修改favicon<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">favicon: /favicon.ico</div></pre></td></tr></table></figure></p>
<p>然后将favicon.ico放在hexo/source目录下即可。</p>
<font size="5">以上基本就完成了个人博客的搭建，更多信息可参考：</font>

<p><a href="https://xuanwo.org/2015/03/26/hexo-intor/" target="_blank" rel="external">史上最详细的Hexo博客搭建图文教程</a></p>
<p><a href="https://hexo.io/" target="_blank" rel="external">hexo官网</a></p>
<p><a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="external">next文档</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Hexo是一款基于Node.js的静态博客框架，配合github可以搭建属于自己的博客。&lt;/p&gt;
&lt;h1 id=&quot;搭建环境&quot;&gt;&lt;a href=&quot;#搭建环境&quot; class=&quot;headerlink&quot; title=&quot;搭建环境&quot;&gt;&lt;/a&gt;搭建环境&lt;/h1&gt;&lt;h2 id=&quot;安装Nod
    
    </summary>
    
      <category term="hexo+github博客" scheme="https://tenny-peng.github.io/categories/hexo-github%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="hexo" scheme="https://tenny-peng.github.io/tags/hexo/"/>
    
      <category term="github" scheme="https://tenny-peng.github.io/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>spring整合redis</title>
    <link href="https://tenny-peng.github.io/2017/04/21/spring%E6%95%B4%E5%90%88redis/"/>
    <id>https://tenny-peng.github.io/2017/04/21/spring整合redis/</id>
    <published>2017-04-21T02:02:06.000Z</published>
    <updated>2017-04-21T03:17:01.966Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概念简介："><a href="#概念简介：" class="headerlink" title="概念简介："></a>概念简介：</h1><ul>
<li>Redis：一款开源的Key-Value数据库。</li>
<li>Jedis：Redis官方推出的一款面向Java的客户端，提供了很多接口供Java语言调用。</li>
<li>Spring Data Redis：SDR是Spring官方推出，可以算是Spring框架集成Redis操作的一个子框架，封装了Redis的很多命令，可以很方便的使用Spring操作Redis数据库。</li>
</ul>
<p>这三个究竟有什么区别呢？可以简单的这么理解，Redis是用ANSI C写的一个基于内存的Key-Value数据库，而Jedis是Redis官方推出的面向Java的Client，提供了很多接口和方法，可以让Java操作使用Redis，而Spring Data Redis是对Jedis进行了封装，集成了Jedis的一些命令和方法，可以与Spring整合。在后面的配置文件（spring-redis.xml）中可以看到，Spring是通过Jedis类来初始化connectionFactory的。</p>
<h1 id="spring整合redis"><a href="#spring整合redis" class="headerlink" title="spring整合redis"></a>spring整合redis</h1><ol>
<li><p>maven添加依赖配置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;dependency&gt;</div><div class="line">  &lt;groupId&gt;org.springframework.data&lt;/groupId&gt;</div><div class="line">  &lt;artifactId&gt;spring-data-redis&lt;/artifactId&gt;</div><div class="line">	&lt;version&gt;1.4.1.RELEASE&lt;/version&gt;</div><div class="line">&lt;/dependency&gt;</div><div class="line"></div><div class="line">&lt;dependency&gt;</div><div class="line">	&lt;groupId&gt;redis.clients&lt;/groupId&gt;</div><div class="line">	&lt;artifactId&gt;jedis&lt;/artifactId&gt;</div><div class="line">	&lt;version&gt;2.6.1&lt;/version&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>redis.properties</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"># Redis settings</div><div class="line">redis.host=localhost</div><div class="line">redis.port=6379</div><div class="line">redis.pass=tenny</div><div class="line">redis.maxTotal=200</div><div class="line">redis.maxIdle=50</div><div class="line">redis.minIdle=300</div><div class="line">redis.maxWaitMillis=1000</div><div class="line">redis.testOnBorrow=true</div></pre></td></tr></table></figure>
</li>
<li><p>spring-redis.xml</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;  </div><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">	xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</div><div class="line">	xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot;</div><div class="line">	xmlns:p=&quot;http://www.springframework.org/schema/p&quot;</div><div class="line">	xmlns:c=&quot;http://www.springframework.org/schema/c&quot;</div><div class="line">	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans  </div><div class="line">                        http://www.springframework.org/schema/beans/spring-beans.xsd  </div><div class="line">                        http://www.springframework.org/schema/context  </div><div class="line">                        http://www.springframework.org/schema/context/spring-context.xsd  </div><div class="line">                        http://www.springframework.org/schema/mvc  </div><div class="line">                        http://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;&gt;</div><div class="line"></div><div class="line">    &lt;context:property-placeholder location=&quot;classpath:redis.properties&quot; /&gt;  </div><div class="line"></div><div class="line">    &lt;bean id=&quot;poolConfig&quot; class=&quot;redis.clients.jedis.JedisPoolConfig&quot;&gt;  </div><div class="line">        &lt;property name=&quot;maxTotal&quot; value=&quot;$&#123;redis.maxTotal&#125;&quot; /&gt;</div><div class="line">        &lt;property name=&quot;maxIdle&quot; value=&quot;$&#123;redis.maxIdle&#125;&quot; /&gt;</div><div class="line">        &lt;property name=&quot;minIdle&quot; value=&quot;$&#123;redis.minIdle&#125;&quot; /&gt;</div><div class="line">        &lt;property name=&quot;maxWaitMillis&quot; value=&quot;$&#123;redis.maxWaitMillis&#125;&quot; /&gt;</div><div class="line">        &lt;property name=&quot;testOnBorrow&quot; value=&quot;$&#123;redis.testOnBorrow&#125;&quot; /&gt;</div><div class="line">    &lt;/bean&gt;</div><div class="line"></div><div class="line">    &lt;bean id=&quot;connectionFactory&quot; class=&quot;org.springframework.data.redis.connection.jedis.JedisConnectionFactory&quot;</div><div class="line">		p:hostName=&quot;$&#123;redis.host&#125;&quot; p:port=&quot;$&#123;redis.port&#125;&quot; p:password=&quot;$&#123;redis.pass&#125;&quot; c:poolConfig-ref=&quot;poolConfig&quot;&gt;</div><div class="line">    &lt;/bean&gt;  </div><div class="line"></div><div class="line">    &lt;bean id=&quot;redisTemplate&quot; class=&quot;org.springframework.data.redis.core.RedisTemplate&quot;&gt;  </div><div class="line">        &lt;property name=&quot;connectionFactory&quot; ref=&quot;connectionFactory&quot; /&gt;</div><div class="line">    &lt;/bean&gt;</div><div class="line"></div><div class="line">    &lt;bean id=&quot;cacheManager&quot; class=&quot;org.springframework.data.redis.cache.RedisCacheManager&quot; c:template-ref=&quot;redisTemplate&quot;&gt;</div><div class="line">        &lt;property name=&quot;usePrefix&quot; value=&quot;true&quot; /&gt;</div><div class="line">        &lt;property name=&quot;cacheNames&quot;&gt;</div><div class="line">            &lt;set&gt;</div><div class="line">                &lt;value&gt;t&lt;/value&gt;</div><div class="line">                &lt;value&gt;c&lt;/value&gt;</div><div class="line">            &lt;/set&gt;</div><div class="line">        &lt;/property&gt;</div><div class="line">    &lt;/bean&gt;</div><div class="line"></div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>定义User实体</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line">import java.io.Serializable;</div><div class="line">import java.util.Date;</div><div class="line"></div><div class="line">public class User implements Serializable &#123;</div><div class="line"></div><div class="line">	private static final long serialVersionUID = -6683628971480535063L;</div><div class="line"></div><div class="line">	private Integer id;</div><div class="line"></div><div class="line">	private String username;</div><div class="line"></div><div class="line">	private String password;</div><div class="line"></div><div class="line">	private Integer type;</div><div class="line"></div><div class="line">	private Date createTime;</div><div class="line"></div><div class="line">	public Integer getId() &#123;</div><div class="line">		return id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setId(Integer id) &#123;</div><div class="line">		this.id = id;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public String getUsername() &#123;</div><div class="line">		return username;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setUsername(String username) &#123;</div><div class="line">		this.username = username == null ? null : username.trim();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public String getPassword() &#123;</div><div class="line">		return password;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setPassword(String password) &#123;</div><div class="line">		this.password = password == null ? null : password.trim();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public Integer getType() &#123;</div><div class="line">		return type;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setType(Integer type) &#123;</div><div class="line">		this.type = type;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public Date getCreateTime() &#123;</div><div class="line">		return createTime;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setCreateTime(Date createTime) &#123;</div><div class="line">		this.createTime = createTime;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>测试</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line">import java.util.Date;</div><div class="line">import org.springframework.cache.Cache;</div><div class="line">import org.springframework.cache.Cache.ValueWrapper;</div><div class="line">import org.springframework.context.support.ClassPathXmlApplicationContext;</div><div class="line">import org.springframework.data.redis.cache.RedisCacheManager;</div><div class="line">import com.news.pojo.User;</div><div class="line"></div><div class="line">public class TestRedis &#123;</div><div class="line"></div><div class="line">	@SuppressWarnings(&quot;resource&quot;)</div><div class="line">	public static void main(String[] args) &#123;</div><div class="line">		ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(&quot;spring-redis.xml&quot;);</div><div class="line">		RedisCacheManager cacheManager = (RedisCacheManager) context.getBean(&quot;cacheManager&quot;);</div><div class="line">		System.out.println(&quot;cacheNames: &quot; + cacheManager.getCacheNames());</div><div class="line">		Cache cacheT = cacheManager.getCache(&quot;t&quot;);</div><div class="line">		Cache cacheC = cacheManager.getCache(&quot;c&quot;);</div><div class="line"></div><div class="line">		User user1 = new User();</div><div class="line">		user1.setId(1);</div><div class="line">		user1.setUsername(&quot;tenny&quot;);</div><div class="line">		user1.setPassword(&quot;admin&quot;);</div><div class="line">		user1.setType(1);</div><div class="line">		user1.setCreateTime(new Date());</div><div class="line">		User user2 = new User();</div><div class="line">		user2.setId(2);</div><div class="line">		user2.setUsername(&quot;panda&quot;);</div><div class="line">		user2.setPassword(&quot;xiaobai&quot;);</div><div class="line">		user2.setType(2);</div><div class="line">		user2.setCreateTime(new Date());</div><div class="line"></div><div class="line">		System.out.println(&quot;put two user into cacheT...&quot;);</div><div class="line">		cacheT.put(&quot;user1&quot;, user1);</div><div class="line">		cacheT.put(&quot;user2&quot;, user2);</div><div class="line">		System.out.println(&quot;put name and age into cacheC...&quot;);</div><div class="line">		cacheC.put(&quot;name&quot;, &quot;tenny&quot;);</div><div class="line">		cacheC.put(&quot;age&quot;, 25);</div><div class="line"></div><div class="line">		System.out.println(&quot;get two user from cacheT&quot;);</div><div class="line">		User value1 = cacheT.get(&quot;user1&quot;, User.class);</div><div class="line">		System.out.println(value1.toString());</div><div class="line">		ValueWrapper value2 = cacheT.get(&quot;user2&quot;);</div><div class="line">		System.out.println(value2.get());</div><div class="line"></div><div class="line">		System.out.println(&quot;get two user from cacheC&quot;);</div><div class="line">		ValueWrapper value3 = cacheC.get(&quot;name&quot;);</div><div class="line">		System.out.println(value3.get());</div><div class="line">		ValueWrapper value4 = cacheC.get(&quot;age&quot;);</div><div class="line">		System.out.println(value4.get());</div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>测试结果</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">cacheNames: [t, c]</div><div class="line">put two user into cacheT...</div><div class="line">put name and age into cacheC...</div><div class="line">get two user from cacheT</div><div class="line">com.news.pojo.User@2ea227af</div><div class="line">com.news.pojo.User@4386f16</div><div class="line">get two field from cacheC</div><div class="line">tenny</div><div class="line">25</div></pre></td></tr></table></figure>
</li>
<li><p>直接使用redisTemplate</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">@SuppressWarnings(&quot;unchecked&quot;)</div><div class="line">RedisTemplate&lt;String, User&gt; redisTemplate = (RedisTemplate&lt;String, User&gt;) context.getBean(&quot;redisTemplate&quot;);</div><div class="line">System.out.println(&quot;put two user into redisTemplate...&quot;);</div><div class="line">redisTemplate.opsForHash().put(&quot;user&quot;, &quot;user1&quot;, user1);</div><div class="line">redisTemplate.opsForHash().put(&quot;user&quot;, &quot;user2&quot;, user2);</div><div class="line">System.out.println(&quot;gut two user from redisTemplate...&quot;);</div><div class="line">User redisUser1 = (User) redisTemplate.opsForHash().get(&quot;user&quot;, &quot;user1&quot;);</div><div class="line">System.out.println(redisUser1);</div><div class="line">User redisUser2 = (User) redisTemplate.opsForHash().get(&quot;user&quot;, &quot;user2&quot;);</div><div class="line">System.out.println(redisUser2);</div><div class="line"></div><div class="line">@SuppressWarnings(&quot;unchecked&quot;)</div><div class="line">RedisTemplate&lt;String, String&gt; redisTemplate2 = (RedisTemplate&lt;String, String&gt;) context.getBean(&quot;redisTemplate&quot;);</div><div class="line">System.out.println(&quot;put color list into redisTemplate2...&quot;);</div><div class="line">redisTemplate2.opsForList().leftPush(&quot;color&quot;, &quot;blue&quot;);</div><div class="line">redisTemplate2.opsForList().leftPush(&quot;color&quot;, &quot;red&quot;);</div><div class="line">redisTemplate2.opsForList().rightPush(&quot;color&quot;, &quot;yellow&quot;);</div><div class="line">System.out.println(&quot;gut color list from redisTemplate2...&quot;);</div><div class="line">List&lt;String&gt; colorList = redisTemplate2.opsForList().range(&quot;color&quot;, 0, -1);</div><div class="line">System.out.println(colorList);</div></pre></td></tr></table></figure>
</li>
<li><p>redisTemplate测试结果</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">put two user into redisTemplate...</div><div class="line">gut two user from redisTemplate...</div><div class="line">com.news.pojo.User@4313f5bc</div><div class="line">com.news.pojo.User@7f010382</div><div class="line">put color list into redisTemplate2...</div><div class="line">gut color list from redisTemplate2...</div><div class="line">[red, blue, yellow]</div></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;概念简介：&quot;&gt;&lt;a href=&quot;#概念简介：&quot; class=&quot;headerlink&quot; title=&quot;概念简介：&quot;&gt;&lt;/a&gt;概念简介：&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Redis：一款开源的Key-Value数据库。&lt;/li&gt;
&lt;li&gt;Jedis：Redis官方推出的一款
    
    </summary>
    
      <category term="redis" scheme="https://tenny-peng.github.io/categories/redis/"/>
    
    
      <category term="spring" scheme="https://tenny-peng.github.io/tags/spring/"/>
    
      <category term="redis" scheme="https://tenny-peng.github.io/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>redis设置密码</title>
    <link href="https://tenny-peng.github.io/2017/04/19/redis%E8%AE%BE%E7%BD%AE%E5%AF%86%E7%A0%81/"/>
    <id>https://tenny-peng.github.io/2017/04/19/redis设置密码/</id>
    <published>2017-04-19T08:48:43.000Z</published>
    <updated>2017-04-19T09:25:56.658Z</updated>
    
    <content type="html"><![CDATA[<p>设置密码有两种方式。</p>
<ol>
<li><p>命令行设置密码。</p>
<p>运行cmd切换到redis根目录，先启动服务端</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt;redis-server.exe</div></pre></td></tr></table></figure>
<p>另开一个cmd切换到redis根目录，启动客户端</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt;redis-cli.exe -h 127.0.0.1 -p 6379</div></pre></td></tr></table></figure>
<p>客户端使用config get requirepass命令查看密码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt;config get requirepass</div><div class="line">1)&quot;requirepass&quot;</div><div class="line">2)&quot;&quot;    //默认空</div></pre></td></tr></table></figure>
<p>客户端使用config set requirepass yourpassword命令设置密码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;config set requirepass 123456</div><div class="line">&gt;OK</div></pre></td></tr></table></figure>
<p>一旦设置密码，必须先验证通过密码，否则所有操作不可用</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;config get requirepass</div><div class="line">(error)NOAUTH Authentication required</div></pre></td></tr></table></figure>
<p>使用auth password验证密码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt;auth 123456</div><div class="line">&gt;OK</div><div class="line">&gt;config get requirepass</div><div class="line">1)&quot;requirepass&quot;</div><div class="line">2)&quot;123456&quot;</div></pre></td></tr></table></figure>
<p>也可以退出重新登录</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">redis-cli.exe -h 127.0.0.1 -p 6379 -a 123456</div></pre></td></tr></table></figure>
<p>命令行设置的密码在服务重启后失效，所以一般不使用这种方式。</p>
</li>
<li><p>配置文件设置密码</p>
<p>在redis根目录下找到redis.windows.conf配置文件，搜索requirepass，找到注释密码行，添加密码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># requirepass foobared</div><div class="line">requirepass tenny     //注意，行前不能有空格</div></pre></td></tr></table></figure>
<p>重启服务后，客户端重新登录后发现</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt;config get requirepass</div><div class="line">1)&quot;requirepass&quot;</div><div class="line">2)&quot;&quot;</div></pre></td></tr></table></figure>
<p>密码还是空？</p>
<p>网上查询后的办法：创建redis-server.exe 的快捷方式， 右键快捷方式属性，在目标后面增加redis.windows.conf， 这里就是关键，你虽然修改了.conf文件，但是exe却没有使用这个conf，所以我们需要<strong>手动指定</strong>一下exe按照<strong>修改后的conf</strong>运行，就OK了。</p>
<p>所以，这里我再一次重启redis服务(指定配置文件)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt;redis-server.exe redis.windows.conf</div></pre></td></tr></table></figure>
<p>客户端再重新登录，OK了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt;redis-cli.exe -h 127.0.0.1 -p 6379 -a 123456</div><div class="line">&gt;config get requirepass</div><div class="line">1)&quot;requirepass&quot;</div><div class="line">2)&quot;123456&quot;</div></pre></td></tr></table></figure>
<p>疑问: redis目录下有两个配置文件redis.windows.conf和redis.windows-server.conf，看到网上有的人用前者有的人用后者，不清楚到底该用哪一个。看了下两个文件又没啥区别，个人就用前者了。</p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;设置密码有两种方式。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;命令行设置密码。&lt;/p&gt;
&lt;p&gt;运行cmd切换到redis根目录，先启动服务端&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre
    
    </summary>
    
      <category term="redis" scheme="https://tenny-peng.github.io/categories/redis/"/>
    
    
      <category term="redis" scheme="https://tenny-peng.github.io/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>redis入门</title>
    <link href="https://tenny-peng.github.io/2017/04/15/redis%E5%85%A5%E9%97%A8/"/>
    <id>https://tenny-peng.github.io/2017/04/15/redis入门/</id>
    <published>2017-04-15T00:54:10.000Z</published>
    <updated>2017-04-19T08:47:10.318Z</updated>
    
    <content type="html"><![CDATA[<h1 id="redis简介"><a href="#redis简介" class="headerlink" title="redis简介"></a>redis简介</h1><p>Redis 是一个高性能的key-value数据库。</p>
<ul>
<li>Redis可基于内存亦可持久化。</li>
<li>Redis 支持存储的value类型丰富，包括string(字符串)、list(链表)、set(集合)、zset(sorted set –有序集合)和hash（哈希类型）</li>
<li>Redis性能极高，读的速度可高达110000次/s，写的速度可高达81000次/s 。</li>
<li>Redis的所有操作都是原子性的，Redis还支持几个操作合并后的原子性执行。</li>
</ul>
<h1 id="Redis-下载安装"><a href="#Redis-下载安装" class="headerlink" title="Redis 下载安装"></a>Redis 下载安装</h1><p>Redis官方并不支持Windows。 但是，微软针对Win64自己开发了一个windows版的redis并共享到github上。</p>
<p>点击<a href="https://github.com/MSOpenTech/redis/releases" target="_blank" rel="external">https://github.com/MSOpenTech/redis/releases</a>下载。</p>
<p>选择你喜欢的安装方式，这里我选择压缩版。<br><img src="/2017/04/15/redis入门/20170415092253.png" alt="下载redis"></p>
<p>安装/解压缩后到redis目录找到redis-server.exe和redis-cli.exe<br><img src="/2017/04/15/redis入门/20170415094655.png" alt="redis目录"></p>
<p>双击redis-server.exe启动redis服务<br><img src="/2017/04/15/redis入门/20170415095002.png" alt="redis服务"></p>
<p>双击redis-cli.exe启动客户端，用来访问redis服务。<br><img src="/2017/04/15/redis入门/20170415095226.png" alt="redis客户端"></p>
<p>测试一下，设置x的值为1并获取x。<br><img src="/2017/04/15/redis入门/20170415095445.png" alt="redis测试"></p>
<h1 id="使用redis"><a href="#使用redis" class="headerlink" title="使用redis"></a>使用redis</h1><p>redis使用key-value来存储数据。</p>
<h2 id="set-amp-get"><a href="#set-amp-get" class="headerlink" title="set &amp; get"></a>set &amp; get</h2><p>使用set命令设置值，并用get命令获取值。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt; set name &quot;tenny&quot;</div><div class="line">OK</div><div class="line">&gt; get name</div><div class="line">&quot;tenny&quot;</div></pre></td></tr></table></figure></p>
<h2 id="del"><a href="#del" class="headerlink" title="del"></a>del</h2><p>del删除一个key<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt; del name</div><div class="line">(integer) 1</div><div class="line">&gt; get name</div><div class="line">(nil)</div></pre></td></tr></table></figure></p>
<h2 id="incr"><a href="#incr" class="headerlink" title="incr"></a>incr</h2><p>incr递增一个值，如果key不存在则创造它并初始化值为1<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&gt; set connections 10</div><div class="line">OK</div><div class="line">&gt; incr connections</div><div class="line">(integer) 11</div><div class="line">&gt; incr connections</div><div class="line">(integer) 12</div><div class="line"></div><div class="line">&gt; del connections</div><div class="line">(integer) 1</div><div class="line">&gt; incr connections    //connections不存在，初始化为1</div><div class="line">(integer) 1</div></pre></td></tr></table></figure></p>
<h2 id="setnx"><a href="#setnx" class="headerlink" title="setnx"></a>setnx</h2><p>setnx(set-if-not-exists)，如果key不存在才改变值。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&gt; set name &quot;panda&quot;</div><div class="line">OK</div><div class="line">&gt; get name</div><div class="line">&quot;panda&quot;</div><div class="line">&gt; setnx name &quot;tenny&quot;    //因为name存在所以不会改变值</div><div class="line">(integer) 0</div><div class="line">&gt; get name</div><div class="line">&quot;panda&quot;</div><div class="line"></div><div class="line">&gt; get age</div><div class="line">(nil)</div><div class="line">&gt; setnx age 22    //age不存在，赋值为22</div><div class="line">(integer) 1</div><div class="line">&gt; get age</div><div class="line">&quot;22&quot;</div></pre></td></tr></table></figure></p>
<h2 id="expire-amp-ttl"><a href="#expire-amp-ttl" class="headerlink" title="expire &amp; ttl"></a>expire &amp; ttl</h2><p>expire设置生存时间，ttl查看剩余时间。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">&gt; set name &quot;tenny&quot;</div><div class="line">OK</div><div class="line">&gt; expire name 120   //设置name生存时间为120秒</div><div class="line">(integer) 1</div><div class="line">&gt; ttl name</div><div class="line">(integer) 80    //剩余80秒</div><div class="line">&gt; ttl name      //2分钟后</div><div class="line">(integer) -2    //-2表示name这个key已经不存在了。</div><div class="line">&gt; get name</div><div class="line">(nil)</div><div class="line"></div><div class="line">&gt; set name &quot;tenny&quot;</div><div class="line">OK</div><div class="line">&gt; ttl name</div><div class="line">(integer) -1    //默认-1表示永久存在</div><div class="line">&gt; expire name 120</div><div class="line">(integer) 1</div><div class="line">&gt; ttl name</div><div class="line">(integer) 118</div><div class="line">&gt; get name</div><div class="line">&quot;tenny&quot;</div><div class="line">&gt; set name &quot;panda&quot;    //设置值会重置存在时间</div><div class="line">OK</div><div class="line">&gt; ttl name</div><div class="line">(integer) -1</div></pre></td></tr></table></figure></p>
<h2 id="list操作：rpush-amp-lpush-amp-llen-amp-lrange-amp-lpop-amp-rpop"><a href="#list操作：rpush-amp-lpush-amp-llen-amp-lrange-amp-lpop-amp-rpop" class="headerlink" title="list操作：rpush &amp; lpush &amp; llen &amp; lrange &amp; lpop &amp; rpop"></a>list操作：rpush &amp; lpush &amp; llen &amp; lrange &amp; lpop &amp; rpop</h2><ul>
<li><p>rpush在list末尾添加元素</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt; rpush color &quot;blue&quot;    //[bule]</div><div class="line">(integer) 1</div><div class="line">&gt; rpush color &quot;red&quot;   //[bule, red]</div><div class="line">(integer) 2</div></pre></td></tr></table></figure>
</li>
<li><p>lpush在list开头添加元素</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; lpush color &quot;yellow&quot;    //[yellow, bule, red]</div><div class="line">(integer) 3</div></pre></td></tr></table></figure>
</li>
<li><p>llen查看list长度</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; llen color</div><div class="line">(integer) 3</div></pre></td></tr></table></figure>
</li>
<li><p>lrange查看list内容，接受两个参数，开始index和结尾index，如果结尾index为-1，表示直到list末尾。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&gt; lrange color 0 2</div><div class="line">1) &quot;yellow&quot;</div><div class="line">2) &quot;blue&quot;</div><div class="line">3) &quot;red&quot;</div><div class="line">&gt; lrange color 0 1</div><div class="line">1) &quot;yellow&quot;</div><div class="line">2) &quot;blue&quot;</div><div class="line">&gt; lrange color 1 2</div><div class="line">1) &quot;blue&quot;</div><div class="line">2) &quot;red&quot;</div><div class="line">&gt; lrange color 1 2</div><div class="line">1) &quot;blue&quot;</div><div class="line">2) &quot;red&quot;</div></pre></td></tr></table></figure>
</li>
<li><p>lpop移除list第一个元素并返回它</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&gt; lpop color</div><div class="line">&quot;yellow&quot;</div><div class="line">&gt; llen color</div><div class="line">(integer) 2</div><div class="line">&gt; lrange color 0 -1</div><div class="line">1) &quot;blue&quot;</div><div class="line">2) &quot;red&quot;</div></pre></td></tr></table></figure>
</li>
<li><p>rpop移除list最后一个元素并返回它</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt; rpop color</div><div class="line">&quot;red&quot;</div><div class="line">&gt; llen color</div><div class="line">(integer) 1</div><div class="line">&gt; lrange color 0 -1</div><div class="line">1) &quot;blue&quot;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="set操作：sadd-amp-srem-amp-sismember-amp-smembers-amp-sunion"><a href="#set操作：sadd-amp-srem-amp-sismember-amp-smembers-amp-sunion" class="headerlink" title="set操作：sadd &amp; srem &amp; sismember &amp; smembers &amp; sunion"></a>set操作：sadd &amp; srem &amp; sismember &amp; smembers &amp; sunion</h2><p>set类似list，但是元素没有顺序且只能出现一次。</p>
<ul>
<li><p>sadd添加一个元素到set</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&gt; sadd superpowers &quot;flight&quot;   //[&quot;flight&quot;]</div><div class="line">(integer) 1</div><div class="line">&gt; sadd superpowers &quot;x-ray vision&quot;   //[&quot;flight&quot;, &quot;x-ray vision&quot;]</div><div class="line">(integer) 1</div><div class="line">&gt; sadd superpowers &quot;reflexes&quot;   //[&quot;flight&quot;, &quot;x-ray vision&quot;, &quot;reflexes&quot;]</div><div class="line">(integer) 1</div><div class="line">&gt; SADD superpowers &quot;flight&quot;   //重复添加无效</div><div class="line">(integer) 0</div></pre></td></tr></table></figure>
</li>
<li><p>srem从set中移除一个元素</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; srem superpowers &quot;reflexes&quot;   //[&quot;flight&quot;, &quot;x-ray vision&quot;]</div><div class="line">1</div></pre></td></tr></table></figure>
</li>
<li><p>sismember测试一个元素是否存在于set，存在返回1，不存在返回0</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt; sismember superpowers &quot;flight&quot;</div><div class="line">(integer) 1</div><div class="line">&gt; sismember superpowers &quot;reflexes&quot;</div><div class="line">(integer) 0</div></pre></td></tr></table></figure>
</li>
<li><p>smembers查看set所有元素</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt; sismember superpowers</div><div class="line">1) &quot;x-ray vision&quot;</div><div class="line">2) &quot;flight&quot;</div></pre></td></tr></table></figure>
</li>
<li><p>sunion联合多个set并返回它们的合集</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&gt; sadd birdpowers &quot;pecking&quot;</div><div class="line">(integer) 1</div><div class="line">&gt; sadd birdpowers &quot;flight&quot;</div><div class="line">(integer) 1</div><div class="line">&gt; smembers birdpowers</div><div class="line">1) &quot;pecking&quot;</div><div class="line">2) &quot;flight&quot;</div><div class="line">&gt; smembers superpowers</div><div class="line">1) &quot;x-ray vision&quot;</div><div class="line">2) &quot;flight&quot;</div><div class="line">&gt; sunion superpowers birdpowers   //无序的 sunion birdpowers superpowers结果一样</div><div class="line">1) &quot;pecking&quot;</div><div class="line">2) &quot;flight&quot;</div><div class="line">3) &quot;x-ray vision&quot;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="sorted-set操作：zadd-zrange"><a href="#sorted-set操作：zadd-zrange" class="headerlink" title="sorted set操作：zadd zrange"></a>sorted set操作：zadd zrange</h2><p>有序集合(sorted set)类似集合，不过它每个元素有一个关联值，通过这个关联值对元素进行排序。</p>
<ul>
<li><p>zadd为一个有序集合添加元素</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&gt; zadd hackers 1940 &quot;Alan Kay&quot;</div><div class="line">(integer) 1</div><div class="line">&gt; zadd hackers 1906 &quot;Grace Hopper&quot;</div><div class="line">(integer) 1</div><div class="line">&gt; zadd hackers 1953 &quot;Richard Stallman&quot;</div><div class="line">(integer) 1</div><div class="line">&gt; zadd hackers 1965 &quot;Yukihiro Matsumoto&quot;</div><div class="line">(integer) 1</div><div class="line">&gt; zadd hackers 1916 &quot;Claude Shannon&quot;</div><div class="line">(integer) 1</div><div class="line">&gt; zadd hackers 1969 &quot;Linus Torvalds&quot;</div><div class="line">(integer) 1</div><div class="line">&gt; zadd hackers 1957 &quot;Sophie Wilson&quot;</div><div class="line">(integer) 1</div><div class="line">&gt; zadd hackers 1912 &quot;Alan Turing&quot;</div><div class="line">(integer) 1</div></pre></td></tr></table></figure>
</li>
<li><p>zrange类似于lrange，查看sorted set元素。接受两个参数，开始index和结尾index，如果结尾index为-1，表示直到末尾</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&gt; zrange hackers 0 -1</div><div class="line">1) &quot;Grace Hopper&quot;</div><div class="line">2) &quot;Alan Turing&quot;</div><div class="line">3) &quot;Claude Shannon&quot;</div><div class="line">4) &quot;Alan Kay&quot;</div><div class="line">5) &quot;Richard Stallman&quot;</div><div class="line">6) &quot;Sophie Wilson&quot;</div><div class="line">7) &quot;Yukihiro Matsumoto&quot;</div><div class="line">8) &quot;Linus Torvalds&quot;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>可以看到元素以年份递增排序。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt; ZRANGE hackers 2 4</div><div class="line">1) &quot;Claude Shannon&quot;</div><div class="line">2) &quot;Alan Kay&quot;</div><div class="line">3) &quot;Richard Stallman&quot;</div></pre></td></tr></table></figure></p>
<h2 id="hash操作：hset-amp-hget-amp-hgetall-amp-hmset-amp-hincrby-amp-hdel"><a href="#hash操作：hset-amp-hget-amp-hgetall-amp-hmset-amp-hincrby-amp-hdel" class="headerlink" title="hash操作：hset &amp; hget &amp; hgetall &amp; hmset &amp; hincrby &amp; hdel"></a>hash操作：hset &amp; hget &amp; hgetall &amp; hmset &amp; hincrby &amp; hdel</h2><p> hash 是一个string类型的field和value的映射表，hash特别适合用于存储对象。</p>
<ul>
<li>hset添加值<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt; hset user name &quot;tenny&quot;</div><div class="line">(integer) 1</div><div class="line">&gt; hset user email &quot;tenny@example.com&quot;</div><div class="line">(integer) 1</div><div class="line">&gt; hset user password &quot;cutepanda&quot;</div><div class="line">(integer) 1</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>hget获取值</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; hget user name</div><div class="line">&quot;tenny&quot;</div></pre></td></tr></table></figure>
</li>
<li><p>hgetall获取所有值</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&gt; hgetall user</div><div class="line">1) &quot;name&quot;</div><div class="line">2) &quot;tenny&quot;</div><div class="line">3) &quot;email&quot;</div><div class="line">4) &quot;tenny@example.com&quot;</div><div class="line">5) &quot;password&quot;</div><div class="line">6) &quot;cutepanda&quot;</div></pre></td></tr></table></figure>
</li>
<li><p>hmset一次性设置多个值</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&gt; hmset user1 name &quot;tenny1&quot; password &quot;cutepanda1&quot; email &quot;tenny1@example.com&quot;</div><div class="line">OK</div><div class="line">&gt; hgetall user1</div><div class="line">1) &quot;name&quot;</div><div class="line">2) &quot;tenny1&quot;</div><div class="line">3) &quot;password&quot;</div><div class="line">4) &quot;cutepanda1&quot;</div><div class="line">5) &quot;email&quot;</div><div class="line">6) &quot;tenny1@example.com&quot;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>可以使用hset继续添加或修改<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">&gt; hset user1 age 22</div><div class="line">(integer) 1</div><div class="line">&gt; hgetall user1</div><div class="line">1) &quot;name&quot;</div><div class="line">2) &quot;tenny1&quot;</div><div class="line">3) &quot;password&quot;</div><div class="line">4) &quot;cutepanda1&quot;</div><div class="line">5) &quot;email&quot;</div><div class="line">6) &quot;tenny1@example.com&quot;</div><div class="line">7) &quot;age&quot;</div><div class="line">8) &quot;22&quot;</div><div class="line">&gt; hset user1 age 24   //已存在的值重复设定返回0，新值返回1</div><div class="line">(integer) 0</div><div class="line">&gt; hgetall user1</div><div class="line">1) &quot;name&quot;</div><div class="line">2) &quot;tenny1&quot;</div><div class="line">3) &quot;password&quot;</div><div class="line">4) &quot;cutepanda1&quot;</div><div class="line">5) &quot;email&quot;</div><div class="line">6) &quot;tenny1@example.com&quot;</div><div class="line">7) &quot;age&quot;</div><div class="line">8) &quot;24&quot;</div></pre></td></tr></table></figure></p>
<ul>
<li><p>hincrby增加数值型域的值</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt; hset user visits 10</div><div class="line">(integer) 1</div><div class="line">&gt; hincrby user visits 1</div><div class="line">(integer) 11</div><div class="line">&gt; hincrby user visits 1</div><div class="line">(integer) 12</div></pre></td></tr></table></figure>
</li>
<li><p>hdel删除指定的域</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&gt; hdel user visits</div><div class="line">(integer) 1</div><div class="line">&gt; hdel user age   //删除不存在的域返回0</div><div class="line">(integer) 0</div><div class="line">&gt; hdel user visits</div><div class="line">(integer) 0</div><div class="line">&gt; hincrby user visits 20    //字段不存在则默认设置为0后再执行此增加操作</div><div class="line">(integer) 20</div></pre></td></tr></table></figure>
</li>
</ul>
<font size="5">以上介绍了redis的一些简单命令，可以访问<a href="http://www.redis.cn/commands.html" target="_blank" rel="external">redis中文官方网站</a>了解更多。</font>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;redis简介&quot;&gt;&lt;a href=&quot;#redis简介&quot; class=&quot;headerlink&quot; title=&quot;redis简介&quot;&gt;&lt;/a&gt;redis简介&lt;/h1&gt;&lt;p&gt;Redis 是一个高性能的key-value数据库。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Redis可基于内存
    
    </summary>
    
      <category term="redis" scheme="https://tenny-peng.github.io/categories/redis/"/>
    
    
      <category term="redis" scheme="https://tenny-peng.github.io/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>Hello World!</title>
    <link href="https://tenny-peng.github.io/2017/04/08/HelloWorld/"/>
    <id>https://tenny-peng.github.io/2017/04/08/HelloWorld/</id>
    <published>2017-04-08T09:34:50.000Z</published>
    <updated>2017-04-21T03:15:47.542Z</updated>
    
    <content type="html"><![CDATA[<h1 id="开始动手，Hello-World！！"><a href="#开始动手，Hello-World！！" class="headerlink" title="开始动手，Hello World！！"></a>开始动手，Hello World！！</h1><p>是时候编写你自己的第一个Java应用了。</p>
<h2 id="下载JDK"><a href="#下载JDK" class="headerlink" title="下载JDK"></a>下载JDK</h2><p>你可以到这里<a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html" target="_blank" rel="external">下载</a>JDK并安装。</p>
<p>注意：下载的是<strong>JDK</strong>，而<em>不是</em>JRE。JRE是java运行环境，用于运行java程序；JDK是java开发工具包，用于开发java程序，其中包含了JRE，所以我们下载JDK就好。</p>
<p>安装完成后，win + r 输入cmd，打开命令行窗口，输入”java -version”，看到类似如下结果就说明安装成功了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">C:\Users\Administrator&gt;java -version</div><div class="line">java version &quot;1.8.0_102&quot;</div><div class="line">Java(TM) SE Runtime Environment (build 1.8.0_102-b14)</div><div class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.102-b14, mixed mode)</div></pre></td></tr></table></figure></p>
<h2 id="编辑工具"><a href="#编辑工具" class="headerlink" title="编辑工具"></a>编辑工具</h2><p>这里用windows自带的记事本就可以。</p>
<h2 id="创建源文件"><a href="#创建源文件" class="headerlink" title="创建源文件"></a>创建源文件</h2><p>在D盘新建一个目录myapplication(你也可以自己选择其他盘符及目录)，新建一个记事本文档，将下面代码粘贴或手动输入到文本里：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * The HelloWorldApp class implements an application that</div><div class="line"> * simply prints &quot;Hello World!&quot; to standard output.</div><div class="line"> */</div><div class="line">class HelloWorldApp &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        System.out.println(&quot;Hello World!&quot;); // Display the string.</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>注意：Java严格<strong>区分大小写</strong>，HelloWorldApp不等于helloWorldapp。</p>
<p>将该文件保存为HelloWorldApp.java。</p>
<h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><p>win + r，输入cmd，打开命令行窗口，输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cd d:\myapplication</div></pre></td></tr></table></figure></p>
<p>切换到HelloWorldApp.java文件所在目录。</p>
<p>切换目录使用如下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">C:\&gt;D:    //切换到D盘根目录</div><div class="line"></div><div class="line">D:\&gt;cd myapplication    //切换到当前目录下的myapplication目录</div><div class="line"></div><div class="line">D:\myapplication&gt;     //完成切换。。</div></pre></td></tr></table></figure></p>
<p>继续输入:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">javac HelloWorldApp.java</div></pre></td></tr></table></figure></p>
<p>如果没有任何信息，应该就编译成功了，查看myapplication目录，发现多出一个HelloWorldApp.class文件，这个就是字节码文件。<br>如果出现错误提示，请检查文件名和文件内容是否和上述一致。</p>
<h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><p>输入java HelloWorldApp运行程序。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">D:\myapplication&gt;java HelloWorldApp</div><div class="line">Hello World!</div></pre></td></tr></table></figure></p>
<p>看到打印出了”Hello World!”说明我们得程序运行成功了。<br>如果提示错误，请检查文件名和文件内容是否和上述一致。</p>
<p>至此，第一个java应用程序就完成了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;开始动手，Hello-World！！&quot;&gt;&lt;a href=&quot;#开始动手，Hello-World！！&quot; class=&quot;headerlink&quot; title=&quot;开始动手，Hello World！！&quot;&gt;&lt;/a&gt;开始动手，Hello World！！&lt;/h1&gt;&lt;p&gt;是时候编写你
    
    </summary>
    
      <category term="Java学习记录" scheme="https://tenny-peng.github.io/categories/Java%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="java" scheme="https://tenny-peng.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Java是什么</title>
    <link href="https://tenny-peng.github.io/2017/04/08/Java%E6%98%AF%E4%BB%80%E4%B9%88/"/>
    <id>https://tenny-peng.github.io/2017/04/08/Java是什么/</id>
    <published>2017-04-08T06:30:18.000Z</published>
    <updated>2017-04-21T03:15:50.407Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java-技术"><a href="#Java-技术" class="headerlink" title="Java 技术"></a>Java 技术</h1><p>Java技术既是一门编程语言，也是一个平台。</p>
<h2 id="Java编程语言"><a href="#Java编程语言" class="headerlink" title="Java编程语言"></a>Java编程语言</h2><p>Java作为一门高级编程语言，具有如下特性：</p>
<ul>
<li>简单</li>
<li>跨平台</li>
<li>面向对象</li>
<li>便携性</li>
<li>分布式</li>
<li>高性能</li>
<li>多线程</li>
<li>健壮的</li>
<li>动态的</li>
<li>安全的</li>
</ul>
<p>在Java程序中，所有的源文件是以”.java”结尾的普通文本文件，java编译器将源文件编译成”.class”文件。”.class”文件包含的并不是类似”0101011”的机器语言代码，而是称之为字节码(bytecodes)的东东，而这个字节码其实是java虚拟机的机器语言。通过java虚拟机，再将字节码转换为本地机器可识别的代码。</p>
<p>编译图如下：</p>
<p><img src="http://docs.oracle.com/javase/tutorial/figures/getStarted/getStarted-compiler.gif" alt="java编译图"></p>
<p>因为java虚拟机可运行在不同的平台，所以我们的.class文件也可以运行在微软，Linux,苹果等不同平台。虚拟机的存在使得java实现了跨平台，也就是经常说的”一次编译，到处运行”。</p>
<p><img src="http://docs.oracle.com/javase/tutorial/figures/getStarted/helloWorld.gif" alt="java跨平台"></p>
<h2 id="Java平台"><a href="#Java平台" class="headerlink" title="Java平台"></a>Java平台</h2><p>平台是供程序运行的硬件或软件环境。我们常说的微软操作系统，Linux系统，苹果操作系统这些都属于平台。大部分的平台是操作系统和基础硬件的合集。而Java平台与大多数平台不同，它是一个纯的软件平台，运行于其他的基于硬件的平台上(例如Windows)。</p>
<p>Java平台包含两部分：</p>
<ul>
<li>Java虚拟机</li>
<li>Java应用程序接口(API)</li>
</ul>
<p>上面已经提到过java虚拟机，它是java平台的基础，与不同的操作系统对接。</p>
<p>API是内置的许多有用的方法的集合。它将相关的类(class)和接口(interface)组合成库，这个库我们通常称之为包(package)。</p>
<p><img src="http://docs.oracle.com/javase/tutorial/figures/getStarted/getStarted-jvm.gif" alt="java平台"></p>
<p>作为一个平台独立的环境，Java平台的速度比传统编译(c++直接编译成机器指令，java编译后是字节码文件，还需要虚拟机翻译成机器指令)慢，。但是随着硬件的发展，java编译器和虚拟机的性能已大幅提升，其速度和传统编译已相差无几。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Java-技术&quot;&gt;&lt;a href=&quot;#Java-技术&quot; class=&quot;headerlink&quot; title=&quot;Java 技术&quot;&gt;&lt;/a&gt;Java 技术&lt;/h1&gt;&lt;p&gt;Java技术既是一门编程语言，也是一个平台。&lt;/p&gt;
&lt;h2 id=&quot;Java编程语言&quot;&gt;&lt;a hr
    
    </summary>
    
      <category term="Java学习记录" scheme="https://tenny-peng.github.io/categories/Java%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="java" scheme="https://tenny-peng.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Nginx加权轮询算法</title>
    <link href="https://tenny-peng.github.io/2017/04/06/Nginx%E5%8A%A0%E6%9D%83%E8%BD%AE%E8%AF%A2%E7%AE%97%E6%B3%95/"/>
    <id>https://tenny-peng.github.io/2017/04/06/Nginx加权轮询算法/</id>
    <published>2017-04-06T03:33:21.000Z</published>
    <updated>2017-04-06T09:17:57.460Z</updated>
    
    <content type="html"><![CDATA[<p>记录一下nginx加权分配算法。</p>
<p>nginx可以指定轮询几率，weight和访问比率成正比，用于后端服务器性能不均的情况。<br>例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">upstream backend &#123;</div><div class="line">  server a weight=6;</div><div class="line">  server b weight=3;</div><div class="line">  server c weight=1;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>按照配置，每有10次请求，其中6个会转发到a服务器，3个转发到b服务器，1个转发到c服务器。</p>
<p>每个服务器都有三个权重变量，先解释下它们的含义。</p>
<p>(1) weight</p>
<p>配置文件中指定的该服务器的权重，这个值是固定不变的。</p>
<p>(2) effective_weight</p>
<p>服务器的有效权重，初始值为weight。</p>
<p>在释放服务器时，如果发现和某服务器的通信过程中发生了错误，就减小它的effective_weight。<br>此后有新的请求过来时，在选取该服务器的过程中，再逐步增加effective_weight，最终又恢复到weight。<br>之所以增加这个字段，是为了当服务器发生错误时，降低其权重。</p>
<p>(3) current_weight  </p>
<p>服务器目前的权重，初始为0，之后会动态调整。</p>
<p>那么如何动态调整呢？  </p>
<p>nginx每次选取服务器时：</p>
<ol>
<li>先遍历集群中所有服务器，将每个服务器的current_weight增加它的effective_weight，</li>
<li>再累加所有服务器的effective_weight，保存为total。</li>
<li>判断当前服务器的current_weight是否最大，是则选中该服务器，然后把它的current_weight减去total。<br>不是则不会被选中，current_weight也就不用减了。</li>
</ol>
<p>弄清了三个weight字段的含义后，加权轮询算法可描述为：</p>
<ol>
<li>对于每个请求，遍历集群中的所有可用服务器，对于每个服务器执行：<br> current_weight += effecitve_weight。</li>
<li>累加所有effective_weight，保存为total。</li>
<li>选出current_weight最大的服务器，作为本次选定的服务器。</li>
<li>对于本次选定的服务器，执行：current_weight -= total。</li>
</ol>
<p>下面以表格形式记录其过程：</p>
<table>
<thead>
<tr>
<th style="text-align:center">请求次数</th>
<th style="text-align:center">开始current_weight</th>
<th style="text-align:center">增加effective_weight</th>
<th style="text-align:center">累加total</th>
<th style="text-align:center">选中服务器</th>
<th style="text-align:center">选中后current_weight</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">[0, 0, 0]</td>
<td style="text-align:center">[6, 3, 1]</td>
<td style="text-align:center">10</td>
<td style="text-align:center">a</td>
<td style="text-align:center">[-4, 3, 1]</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">[-4, 3, 1]</td>
<td style="text-align:center">[2, 6, 2]</td>
<td style="text-align:center">10</td>
<td style="text-align:center">b</td>
<td style="text-align:center">[2, -4, 2]</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">[2, -4, 2]</td>
<td style="text-align:center">[8, -1, 3]</td>
<td style="text-align:center">10</td>
<td style="text-align:center">a</td>
<td style="text-align:center">[-2, -1, 3]</td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td style="text-align:center">[-2, -1, 3]</td>
<td style="text-align:center">[4, 2, 4]</td>
<td style="text-align:center">10</td>
<td style="text-align:center">a</td>
<td style="text-align:center">[-6, 2, 4]</td>
</tr>
<tr>
<td style="text-align:center">5</td>
<td style="text-align:center">[-6, 2, 4]</td>
<td style="text-align:center">[0, 5, 5]</td>
<td style="text-align:center">10</td>
<td style="text-align:center">b</td>
<td style="text-align:center">[0, -5, 5]</td>
</tr>
<tr>
<td style="text-align:center">6</td>
<td style="text-align:center">[0, -5, 5]</td>
<td style="text-align:center">[6, -2, 6]</td>
<td style="text-align:center">10</td>
<td style="text-align:center">a</td>
<td style="text-align:center">[-4, -2, 6]</td>
</tr>
<tr>
<td style="text-align:center">7</td>
<td style="text-align:center">[-4, -2, 6]</td>
<td style="text-align:center">[2, 1, 7]</td>
<td style="text-align:center">10</td>
<td style="text-align:center">c</td>
<td style="text-align:center">[2, 1, -3]</td>
</tr>
<tr>
<td style="text-align:center">8</td>
<td style="text-align:center">[2, 1, -3]</td>
<td style="text-align:center">[8, 4, -2]</td>
<td style="text-align:center">10</td>
<td style="text-align:center">a</td>
<td style="text-align:center">[-2, 4, -2]</td>
</tr>
<tr>
<td style="text-align:center">9</td>
<td style="text-align:center">[-2, 4, -2]</td>
<td style="text-align:center">[4, 7, -1]</td>
<td style="text-align:center">10</td>
<td style="text-align:center">b</td>
<td style="text-align:center">[4, -3, -1]</td>
</tr>
<tr>
<td style="text-align:center">10</td>
<td style="text-align:center">[4, -3, -1]</td>
<td style="text-align:center">[10, 0, 0]</td>
<td style="text-align:center">10</td>
<td style="text-align:center">a</td>
<td style="text-align:center">[0, 0, 0]</td>
</tr>
</tbody>
</table>
<p>可以看到，选中服务器依次为[a, b, a, a, b, a, c, a, b, a]。</p>
<p>a,b,c分别被选中了6,3,1次，正好是符合其权重值的；<br>服务器a虽然权重大，但没有被连续选取，不会对a服务器连续请求；<br>经过10次请求后，a,b,c的当前权重current_weight又全部归0，如此便可循环往复。</p>
<p>ps: 这里我们发现total永远都是10，因为这里假定服务器都没有发生故障或返回错误，其effective_weight不变。实际中如果服务器发生了错误，nginx当然也会进行降权处理，total也会变啦。这里我们学习一下正常算法，出错的情况就先不展开了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录一下nginx加权分配算法。&lt;/p&gt;
&lt;p&gt;nginx可以指定轮询几率，weight和访问比率成正比，用于后端服务器性能不均的情况。&lt;br&gt;例如：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutt
    
    </summary>
    
      <category term="Nginx" scheme="https://tenny-peng.github.io/categories/Nginx/"/>
    
    
      <category term="nginx" scheme="https://tenny-peng.github.io/tags/nginx/"/>
    
      <category term="算法" scheme="https://tenny-peng.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>hexo-next主题添加打赏功能</title>
    <link href="https://tenny-peng.github.io/2017/04/05/hexo-next%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E6%89%93%E8%B5%8F%E5%8A%9F%E8%83%BD/"/>
    <id>https://tenny-peng.github.io/2017/04/05/hexo-next主题添加打赏功能/</id>
    <published>2017-04-05T06:38:24.000Z</published>
    <updated>2017-04-21T06:10:49.012Z</updated>
    
    <content type="html"><![CDATA[<p>next主题集成了打赏功能，使用起来比较简单。</p>
<p>首先获取微信收款二维码和支付宝收款二维码：</p>
<p>微信：点击右上角的加号”+”，点击”收付款”，点击”我要收款”，就可以看到自己的收款二维码了。还可以点击”设置金额”，之后保存图片(名字可修改为wechatpay.png)。</p>
<p>支付宝： 同理，点击右上角的加号”+”，点击”收钱”,出现二维码，也可以设置金额，之后保存图片(名字可修改为ailpay.jpg)。</p>
<p>我们可以在source目录下建立一个images文件夹，将上面保存的图片放入。</p>
<p>微信和支付宝生成的二维码都有外框，不喜欢外框的话可以利用美图秀秀等软件进行剪裁。选定宽度和高度并勾选锁定剪裁尺寸，一般都是剪裁一个正方形，将剪裁框拖到合适地方，点击”剪裁按钮”，再Ctrl + s 保存即可（支付宝图片同理）。<br><img src="/2017/04/05/hexo-next主题添加打赏功能/20170408140902.png" alt="剪裁图片"></p>
<p>找到主题next下的配置文件_config.yml，添加信息如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># reward</div><div class="line">reward_comment: 如果觉得我的文章对您有用，请随意打赏。您的支持将鼓励我继续创作！</div><div class="line">wechatpay: /images/wechatpay.png</div><div class="line">alipay: /images/alipay.jpg</div></pre></td></tr></table></figure></p>
<p>hexo发布，文章下面就会出现一个赏字，点开效果如下：<br><img src="/2017/04/05/hexo-next主题添加打赏功能/20170405151647.png" alt="打赏效果"></p>
<p>以上就成功添加了打赏功能(虽然基本不会有人打赏。。。)</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;next主题集成了打赏功能，使用起来比较简单。&lt;/p&gt;
&lt;p&gt;首先获取微信收款二维码和支付宝收款二维码：&lt;/p&gt;
&lt;p&gt;微信：点击右上角的加号”+”，点击”收付款”，点击”我要收款”，就可以看到自己的收款二维码了。还可以点击”设置金额”，之后保存图片(名字可修改为wecha
    
    </summary>
    
      <category term="hexo+github博客" scheme="https://tenny-peng.github.io/categories/hexo-github%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="hexo" scheme="https://tenny-peng.github.io/tags/hexo/"/>
    
      <category term="next" scheme="https://tenny-peng.github.io/tags/next/"/>
    
  </entry>
  
  <entry>
    <title>多台电脑hexo部署到github的坑</title>
    <link href="https://tenny-peng.github.io/2017/04/05/%E5%A4%9A%E5%8F%B0%E7%94%B5%E8%84%91hexo%E9%83%A8%E7%BD%B2%E5%88%B0github%E7%9A%84%E5%9D%91/"/>
    <id>https://tenny-peng.github.io/2017/04/05/多台电脑hexo部署到github的坑/</id>
    <published>2017-04-05T02:54:05.000Z</published>
    <updated>2017-04-21T06:10:58.850Z</updated>
    
    <content type="html"><![CDATA[<p>之前在家里搭建了博客，成功部署到github上，并将hexo目录也上传至github/hexo仓库保存。<br>后来到公司想把它们down下来，方便两边修改同步。</p>
<h2 id="第一个坑是hexo发布博客到github"><a href="#第一个坑是hexo发布博客到github" class="headerlink" title="第一个坑是hexo发布博客到github"></a>第一个坑是hexo发布博客到github</h2><p>同样进行了一系列的node安装，hexo安装等，并且在hexo博客目录下down下了guthub/hexo的资源，本地启动，没问题。<br>但是当我发布想发布到yourname.github.io上时，问题来了，它居然把我的<strong>整个hexo博客目录</strong>扔到了yourname.github.io上，不是说好的只发布<strong>.deploy_git</strong>下的内容呢！！</p>
<p>于是我就茫然了啊，我去查看hexo下的_config.yml文件，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">  repo: git@github.com:tenny-peng/tenny-peng.github.io.git</div><div class="line">  branch: master</div></pre></td></tr></table></figure></p>
<p>没错啊，是这个地址啊。</p>
<p>后来一想也不对，就算这里错了也不对，不是目标地址错了，而是发布的内容错了。</p>
<p>网上查到了这篇博客: <a href="http://www.jianshu.com/p/67c57c70f275" target="_blank" rel="external">hexo部署到github遇到的坑</a>，最后说删除hexo目录下的.git文件，然后我就试了试，重新发布，然后又报错了。。这里想截图可是命令行找不到了，大概就是说没有指定repository，然后我点开<strong>.deploy_git</strong>文件夹，突然想到在家里<strong>.deploy_git</strong>文件夹下面是有.git的，而且还是我自己指定的。</p>
<p>哈哈，瞬间好像知道了，打开git bash，切换到hexo/.deploy_git，执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git init</div></pre></td></tr></table></figure></p>
<p>再绑定远程仓库<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git remote add origin git@github.com:tenny-peng/tenny-peng.github.io.git</div></pre></td></tr></table></figure></p>
<p>回到cmd命令行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo d</div></pre></td></tr></table></figure></p>
<p>搞定了，成功提交了正确的博客内容。</p>
<h2 id="第二个坑是hexo目录与github-hexo同步"><a href="#第二个坑是hexo目录与github-hexo同步" class="headerlink" title="第二个坑是hexo目录与github/hexo同步"></a>第二个坑是hexo目录与github/hexo同步</h2><p>然后再把我的hexo目录和github/hexo同步，刚才把hexo目录下的.git删了。好吧，重新建回来。<br>git bash切换到hexo根目录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git init</div><div class="line"></div><div class="line">git remote add origin git@github.com:tenny-peng/hexo.git</div></pre></td></tr></table></figure></p>
<p>执行pull指令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">$ git pull origin master</div><div class="line">From github.com:tenny-peng/hexo</div><div class="line"> * branch            master     -&gt; FETCH_HEAD</div><div class="line">error: The following untracked working tree files would be overwritten by merge:</div><div class="line">        .npmignore</div><div class="line">        _config.yml</div><div class="line">        db.json</div><div class="line">        node_modules/.bin/JSONStream</div><div class="line">        node_modules/.bin/JSONStream.cmd</div><div class="line">        node_modules/.bin/acorn</div><div class="line">        node_modules/.bin/acorn.cmd</div><div class="line">        ...</div></pre></td></tr></table></figure></p>
<p>这里说一下，第一个坑中hexo目录下的内容是我直接从github/hexo上down下来复制过来的，然后本地又进行过hexo生成和发布操作，错误具体原因不太清除(知道的童鞋欢迎指正)，网上查到解决办法是先清理<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$ git clean -f -d</div><div class="line">Skipping repository .deploy_git/</div><div class="line">Removing .npmignore</div><div class="line">Removing _config.yml</div><div class="line">Removing db.json</div><div class="line">Removing node_modules/</div><div class="line">Removing package.json</div><div class="line">Removing public/</div><div class="line">Removing scaffolds/</div><div class="line">Removing source/</div><div class="line">Removing themes/</div></pre></td></tr></table></figure></p>
<p>清理后hexo目录下只剩.deploy_git和.git目录，再拉取就可以了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ git pull origin master</div><div class="line">From github.com:tenny-peng/hexo</div><div class="line"> * branch            master     -&gt; FETCH_HEAD</div><div class="line">Checking out files: 100% (7651/7651), done.</div></pre></td></tr></table></figure></p>
<p>所以下次可以先同步好hexo文件夹，这样第二个坑应该就不会出现了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前在家里搭建了博客，成功部署到github上，并将hexo目录也上传至github/hexo仓库保存。&lt;br&gt;后来到公司想把它们down下来，方便两边修改同步。&lt;/p&gt;
&lt;h2 id=&quot;第一个坑是hexo发布博客到github&quot;&gt;&lt;a href=&quot;#第一个坑是hexo发布
    
    </summary>
    
      <category term="hexo+github博客" scheme="https://tenny-peng.github.io/categories/hexo-github%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="hexo" scheme="https://tenny-peng.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>修复TortoiseGit图标不显示</title>
    <link href="https://tenny-peng.github.io/2017/04/04/%E4%BF%AE%E5%A4%8DTortoiseGit%E5%9B%BE%E6%A0%87%E4%B8%8D%E6%98%BE%E7%A4%BA/"/>
    <id>https://tenny-peng.github.io/2017/04/04/修复TortoiseGit图标不显示/</id>
    <published>2017-04-04T03:35:14.000Z</published>
    <updated>2017-04-05T02:51:59.788Z</updated>
    
    <content type="html"><![CDATA[<ol>
<li><p>win + r 打开运行，输入regedit.exe打开注册表</p>
</li>
<li><p>找到HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Explorer</p>
</li>
<li><p>修改符串值 “Max Cached Icons” (如没有则新建)值为 “10000”(切换到十进制)。<br><img src="/2017/04/04/修复TortoiseGit图标不显示/20170404114101.png" alt="注册表"></p>
</li>
<li><p>Ctrl + Alt + Del 打开任务管理器,找到explorer.explorer<br><img src="/2017/04/04/修复TortoiseGit图标不显示/20170404114741.png" alt="任务管理器"></p>
</li>
<li><p>右键选中explorer.exe，在弹出选项中选择”结束进程”,这个时候会发现电脑底部状态栏没有了，不用担心。</p>
</li>
<li><p>任务管理器上方的”文件”选项，点击”新建任务(运行)”，输入explorer.exe，确定即可。<br><img src="/2017/04/04/修复TortoiseGit图标不显示/20170404115205.png" alt="重启explorer"></p>
</li>
</ol>
<p>由于Windows Explorer Shell 支持的 Overlay Icon 最多 15 个，Windows 自身使用了 4 个，只剩 11 个可扩展使用。我们在这里调节了它的最大图标数。<br>explorer.exe是Windows程序管理器或者文件资源管理器，它用于管理Windows图形壳，包括桌面和文件管理，重启explorer.exe就可以看到我们的修改了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;&lt;p&gt;win + r 打开运行，输入regedit.exe打开注册表&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;找到HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Explorer&lt;/p&gt;
&lt;/l
    
    </summary>
    
      <category term="TortoiseGit" scheme="https://tenny-peng.github.io/categories/TortoiseGit/"/>
    
    
      <category term="TortoiseGit" scheme="https://tenny-peng.github.io/tags/TortoiseGit/"/>
    
  </entry>
  
  <entry>
    <title>MarkDown设置字体颜色</title>
    <link href="https://tenny-peng.github.io/2017/04/03/MarkDown%E5%AD%97%E4%BD%93%E9%A2%9C%E8%89%B2/"/>
    <id>https://tenny-peng.github.io/2017/04/03/MarkDown字体颜色/</id>
    <published>2017-04-03T13:15:12.000Z</published>
    <updated>2017-04-21T06:10:26.204Z</updated>
    
    <content type="html"><![CDATA[<p>记录一下如何设置字体颜色和大小<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;font color=red size=5&gt;gray&lt;/font&gt;</div><div class="line">&lt;font color=&quot;#4590a3&quot; size=&quot;6px&quot;&gt;文字&lt;/font&gt;</div></pre></td></tr></table></figure></p>
<p>效果如下：</p>
<font color="red" size="5">red</font><br><font color="#4590a3" size="6px">文字</font>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录一下如何设置字体颜色和大小&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;
    
    </summary>
    
      <category term="markdown" scheme="https://tenny-peng.github.io/categories/markdown/"/>
    
    
      <category term="markdown" scheme="https://tenny-peng.github.io/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>hexo引用本地图片</title>
    <link href="https://tenny-peng.github.io/2017/04/03/MarkDown%E5%BC%95%E7%94%A8%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87/"/>
    <id>https://tenny-peng.github.io/2017/04/03/MarkDown引用本地图片/</id>
    <published>2017-04-03T12:03:30.000Z</published>
    <updated>2017-04-05T02:51:59.785Z</updated>
    
    <content type="html"><![CDATA[<h3 id="markdown文章里引用图片有两种方式。"><a href="#markdown文章里引用图片有两种方式。" class="headerlink" title="markdown文章里引用图片有两种方式。"></a>markdown文章里引用图片有两种方式。</h3><p>一种是直接引用互联网上的图片，使用绝对路径  <a href="http://xxx.com/xxx.jpg" target="_blank" rel="external">http://xxx.com/xxx.jpg</a></p>
<p>一种是使用本地图片。</p>
<p>因为最后要发布到网上，所以引用本地图片路径必须是相对路径xxx/xxx.png</p>
<h3 id="这里讲如何引用本地图片。"><a href="#这里讲如何引用本地图片。" class="headerlink" title="这里讲如何引用本地图片。"></a>这里讲如何引用本地图片。</h3><p>首先在站点_config.yml 中找到”post_asset_folder”属性，将其设置为”true”。Hexo 提供了一种更方便管理 Asset 的设定：post_asset_folder。当设置post_asset_folder为true参数后，在建立文件时，Hexo会自动建立一个与文章同名的文件夹，您可以把与该文章相关的所有资源都放到那个文件夹，如此一来，您便可以更方便的使用资源。</p>
<p>启动cmd,切换到hexo的目录下执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install https://github.com/CodeFalling/hexo-asset-image --save</div></pre></td></tr></table></figure></p>
<p>等待一段时即可。</p>
<p> 安装完成后用hexo新建文章的时候_posts目录下面会多出一个和文章同名的文件夹。图片就可以放在该文件夹下面使用。</p>
<p><img src="/2017/04/03/MarkDown引用本地图片/20170404161617.png" alt="hexo new1"></p>
<p><img src="/2017/04/03/MarkDown引用本地图片/20170404161920.png" alt="hexo new2"></p>
<p>把你要引用的图片放在同名目录下,如下引用即可。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">![xxx](testpic/xxxxxx.png)</div></pre></td></tr></table></figure>
<p>个人感觉也可以不装这个插件，自己手动建立同名文件夹也可以的。但是装了还是方便，毕竟hexo新建文章能初始化一些信息。</p>
<p>再说下本人踩过的坑。在source目录下建立images文件夹存放图片，然后通过../images/xxx.png引用，感觉是没什么问题的，实际在本地也没问题。但是上传到github就不对了。github上去找寻的路径类似<br><a href="https://tenny-peng.github.io/2017/04/04/images/xxx.png。">https://tenny-peng.github.io/2017/04/04/images/xxx.png。</a><br>很明显这是找不到的，因为发布后2017/04/04下只有文章，没有其他文件或文件夹。也试过在_posts下建立images,通过images/xxx.png引用，结果是一样的。</p>
<p>然后建立了同名文件夹，到github上查看发布后的文件才发现，对于每个md文件，生成一个同名的文件夹，里面有一个index.html文件是md文件转化的内容，我们当初自建的同名文件夹下的图片也在该文件夹下，例如，在github上，对于testpic.md,生成一个testpic文件夹，里面有一个index.html,其内容就是我们得testpic.md里编写的内容，而我们当时正好建立了同名的文件夹来存放图片，此时，这些图片也到了github下的同名文件夹。如此一来，引用就没有问题了。</p>
<p><img src="/2017/04/03/MarkDown引用本地图片/20170404164607.png" alt="本地目录"></p>
<p><img src="/2017/04/03/MarkDown引用本地图片/20170404164402.png" alt="github目录"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;markdown文章里引用图片有两种方式。&quot;&gt;&lt;a href=&quot;#markdown文章里引用图片有两种方式。&quot; class=&quot;headerlink&quot; title=&quot;markdown文章里引用图片有两种方式。&quot;&gt;&lt;/a&gt;markdown文章里引用图片有两种方式。&lt;/
    
    </summary>
    
      <category term="markdown" scheme="https://tenny-peng.github.io/categories/markdown/"/>
    
    
      <category term="markdown" scheme="https://tenny-peng.github.io/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>Git简单教程</title>
    <link href="https://tenny-peng.github.io/2017/04/03/Git%E7%AE%80%E5%8D%95%E6%95%99%E7%A8%8B/"/>
    <id>https://tenny-peng.github.io/2017/04/03/Git简单教程/</id>
    <published>2017-04-03T05:45:13.000Z</published>
    <updated>2017-04-19T08:45:31.632Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Git是一款免费、开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目,</p>
<p>可以有效、高速的处理从很小到非常大的项目版本管理。</p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>由于本人是Windows平台，所以这里安装的是Windows平台下的工具。</p>
<p>点击<a href="https://git-scm.com/download/win" target="_blank" rel="external">https://git-scm.com/download/win</a>下载</p>
<p>如果网速太慢可以百度搜索“git下载”。</p>
<p>下载完成之后一路next就可以了，  </p>
<p>安装完成后，开始菜单找到”git”-&gt;”Git Bash”，</p>
<p>在命令行输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git --version</div></pre></td></tr></table></figure></p>
<p>看到类似如下结果，说明我们安装成功了。</p>
<p><img src="/2017/04/03/Git简单教程/20170403201939.png" alt="git_bash_img"></p>
<p>安装完成后，还需要一点设置，在打开的git bash命令行中输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git config --global user.name &quot;Your Name&quot;</div><div class="line">$ git config --global user.email &quot;email@example.com&quot;</div></pre></td></tr></table></figure></p>
<p><strong>注意把上面改成自己的名字和邮箱地址</strong></p>
<p>git config命令的–global参数，表示你这台机器上所有的Git仓库都会使用这个配置，</p>
<p>当然也可以对某个仓库指定不同的用户名和Email地址。</p>
<p>因为Git是分布式版本控制系统，所以，每个机器都必须自报家门：你的名字和Email地址。</p>
<h1 id="使用github"><a href="#使用github" class="headerlink" title="使用github"></a>使用github</h1><p>我们希望项目不只是在本地，只有有网，哪里都可以获取自己的项目，<br>GitHub 正是这样一个面向开源及私有软件项目的托管平台。<br>我们可以把自己的项目放在这个平台上，可以和其他人维护项目。</p>
<p>后面会讲git的基本操作，你也可以直接到后面查看。作为一般流程，这里让我们先注册一个github账号</p>
<p>进入<a href="https://github.com/" target="_blank" rel="external">github</a>网站,点击sign up</p>
<p><img src="/2017/04/03/Git简单教程/20170403203407.png" alt="注册github"></p>
<p>填写信息后点击”create an account” 按钮</p>
<p><img src="/2017/04/03/Git简单教程/20170403203655.png" alt="注册github"></p>
<p>之后进入到我们的首页</p>
<p><img src="/2017/04/03/Git简单教程/20170403204148.png" alt="github首页"></p>
<p>这样我们已经成功拥有了一个github账号，让我们正式开始吧~</p>
<p>简单说下仓库的概念，仓库的英文名是repository，你可以简单理解成一个目录，<br>这个目录里面的所有文件都可以被Git管理起来，每个文件的修改、删除，Git都能跟踪，<br>以便任何时刻都可以追踪历史，或者在将来某个时刻可以“还原”。</p>
<p>点击上面的+号，新建一个仓库<br><img src="/2017/04/03/Git简单教程/20170403204148.png" alt="github首页"></p>
<p>输入我们的仓库名称后，点击下面”create repository”按钮即可创建一个仓库<br><img src="/2017/04/03/Git简单教程/0170403204526.png" alt="仓库信息"></p>
<p>我们可以看到这个仓库是空的，什么都没有。<br><img src="/2017/04/03/Git简单教程/20170403205231.png" alt="空仓库"></p>
<p>接下来，我们回到本地git上。</p>
<h1 id="克隆仓库"><a href="#克隆仓库" class="headerlink" title="克隆仓库"></a>克隆仓库</h1><p>由于你的本地Git仓库和GitHub仓库之间的传输是通过SSH加密的，所以还需要一点设置：</p>
<p>回到git bash命令窗口，创建SSH  key:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh-keygen -t rsa -C &quot;youremail@example.com&quot;</div></pre></td></tr></table></figure></p>
<p>你需要把邮件地址换成你自己的邮件地址，然后一路回车，使用默认值即可，由于这个Key也不是用于军事目的，所以也无需设置密码。</p>
<p>如果一切顺利的话，可以在用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对，id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。</p>
<p>登录你的github，进入setting，点击”SSH and GPG keys”,点击右上角”New SSH Key”,tite随便填，Key文本框里粘贴id_rsa.pub文件的内容，最后点击”Add SSh Key”即可。<br><img src="/2017/04/03/Git简单教程/20170408134106.png" alt="填写公钥"></p>
<p>可以看到我这里已经有两个了，一个家里一个公司，这样就可以两边同步信息了。</p>
<p>为什么GitHub需要SSH Key呢？因为GitHub需要识别出你推送的提交确实是你推送的，而不是别人冒充的，而Git支持SSH协议，所以，GitHub只要知道了你的公钥，就可以确认只有你自己才能推送。</p>
<p>接下来输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cd e:</div></pre></td></tr></table></figure></p>
<p>切换目录，执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone git@github.com:tenny-peng/test.git</div></pre></td></tr></table></figure></p>
<p>稍等一会，就可将github上的项目克隆到本地</p>
<p><img src="/2017/04/03/Git简单教程/20170403212928.png" alt="本地仓库"></p>
<p>这里我选的e盘根目录，你可以自己修改，<strong>注意：选择的目录下不可以有仓库同名目录</strong><br>如我的e盘下不能有test这个目录，不然在克隆时会报错。</p>
<p><img src="/2017/04/03/Git简单教程/20170403210357.png" alt="克隆仓库"><br>这里有一个警告，说我们的仓库是空的，不用管它，我们马上会添加文件。</p>
<h1 id="添加文件"><a href="#添加文件" class="headerlink" title="添加文件"></a>添加文件</h1><font color="red" size="5">使用Windows的童鞋要特别注意：</font>

<p>千万不要使用Windows自带的记事本编辑任何文本文件。原因是Microsoft开发记事本的团队使用了<br>一个非常弱智的行为来保存UTF-8编码的文件，他们自作聪明地在每个文件开头添加了0xefbbbf<br>（十六进制）的字符，你会遇到很多不可思议的问题，比如，网页第一行可能会显示一个“?”，<br>明明正确的程序一编译就报语法错误，等等，都是由记事本的弱智行为带来的。建议你下载<br>Notepad++代替记事本，不但功能强大，而且免费！记得把notepad++的默认编码设置为UTF-8<br>without BOM即可。</p>
<p>在仓库test文件目录下，我们先编写一个readme.txt文件，内容如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Git is a version control system.</div><div class="line">Git is free software.</div></pre></td></tr></table></figure></p>
<p><img src="/2017/04/03/Git简单教程/20170403213141.png" alt="新建文件"></p>
<p>这里我们可以看到test目录下有一个隐藏的.git目录(看不到可自行百度“windows查看隐藏文件方法”)，这个就说明此目录是由git管理的仓库了，如果删除了这个隐藏的目录，那个git也就不认识这个目录了，也不能对此目录下的文件进行管理了。</p>
<p>回到命令行，输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git add readme.txt</div></pre></td></tr></table></figure></p>
<p><img src="/2017/04/03/Git简单教程/20170403213613.png" alt="添加文件"></p>
<p>什么反馈信息也没有？那就对了，Unix的哲学是“没有消息就是好消息”，说明添加成功。</p>
<p>使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git status</div></pre></td></tr></table></figure></p>
<p>可查看当前仓库状态</p>
<p><img src="/2017/04/03/Git简单教程/20170403213822.png" alt="添加状态"></p>
<p>我们发现提示有新文件，但是这样还不够。</p>
<p>我们继续输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git commit -m &quot;add readme.txt&quot;</div></pre></td></tr></table></figure></p>
<p>这样才把文件提交到仓库，再次输入”git status”查看状态</p>
<p><img src="/2017/04/03/Git简单教程/20170403214113.png" alt="提交状态"></p>
<p>简单解释一下git commit命令，-m后面输入的是本次提交的说明，可以输入任意内容，当然最好是有意义的，这样你就能从历史记录里方便地找到改动记录。</p>
<p>git commit命令执行成功后会告诉你，1个文件被改动（我们新添加的readme.txt文件），插入了两行内容（readme.txt有两行内容）。</p>
<h1 id="推送"><a href="#推送" class="headerlink" title="推送"></a>推送</h1><p>这里我就在仓库里新增了一个文件，当然还会有修改，删除操作。其实这样就可以管理自己的项目了。但是，我们似乎忘记了github。对，我们需要的是随时随处可获取，所以我们需要把本地仓库的内容同步到github这个托管平台。</p>
<p>当你从远程仓库克隆时，实际上Git自动把本地的master分支(分支后面再讲，简单理解为仓库的多个版本，默认一个主分支)和远程的master分支对应起来了，并且，远程仓库的默认名称是origin。</p>
<p>要查看远程库的信息，输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git remote</div></pre></td></tr></table></figure></p>
<p>或<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git remote -v</div></pre></td></tr></table></figure></p>
<p>获取更详细信息</p>
<p><img src="/2017/04/03/Git简单教程/20170403214855.png" alt="远程信息"></p>
<p>上面显示了可以抓取和推送的origin的地址。如果没有推送权限，就看不到push的地址。</p>
<p>接下来我们把本地改动(这里新增了一个文件，对于git，新增，修改，删除，都属于改动)推送到远程仓库。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git push origin master</div></pre></td></tr></table></figure></p>
<p><img src="/2017/04/03/Git简单教程/20170403215328.png" alt="推送分支"></p>
<p>刷新浏览器中我们的github主页，可以看到，readme.txt文件已经同步到远程仓库了。<br><img src="/2017/04/03/Git简单教程/20170403215427.png" alt="查看远程分支"></p>
<font size="5">以上我们就使用git创建了自己的仓库，并将其同步到远程服务器上，以便我们在其它地方，或其他人获取。</font>

<p><br><br>参考：</p>
<p><a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="external">廖雪峰的git教程</a></p>
<p><a href="http://www.baike.com/wiki/GIT" target="_blank" rel="external">git互动百科</a></p>
<p><a href="http://www.baike.com/wiki/github" target="_blank" rel="external">github互动百科</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;Git是一款免费、开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目,&lt;/p&gt;
&lt;p&gt;可以有效、高速的处理从很小到非常大的项目版
    
    </summary>
    
      <category term="git" scheme="https://tenny-peng.github.io/categories/git/"/>
    
    
      <category term="git" scheme="https://tenny-peng.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Markdown基础语法</title>
    <link href="https://tenny-peng.github.io/2017/04/03/MarkDown%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    <id>https://tenny-peng.github.io/2017/04/03/MarkDown基础语法/</id>
    <published>2017-04-03T02:21:15.000Z</published>
    <updated>2017-04-06T08:00:46.811Z</updated>
    
    <content type="html"><![CDATA[<h1 id="标准mrakdown语法"><a href="#标准mrakdown语法" class="headerlink" title="标准mrakdown语法"></a>标准mrakdown语法</h1><h2 id="加粗和斜体"><a href="#加粗和斜体" class="headerlink" title="加粗和斜体"></a>加粗和斜体</h2><h3 id="字体加粗以两个-或两个-开头结尾"><a href="#字体加粗以两个-或两个-开头结尾" class="headerlink" title="字体加粗以两个*或两个_开头结尾"></a>字体加粗以两个*或两个_开头结尾</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">__重要的事情说三遍！！！__   **重要的事情说三遍！！！**</div></pre></td></tr></table></figure>
<p>效果如下：</p>
<p><strong>重要的事情说三遍！！！</strong></p>
<h3 id="字体倾斜以一个-或-开头结尾"><a href="#字体倾斜以一个-或-开头结尾" class="headerlink" title="字体倾斜以一个*或_开头结尾"></a>字体倾斜以一个*或_开头结尾</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">_一段斜体文字_   *一段斜体文字*</div></pre></td></tr></table></figure>
<p>效果如下：</p>
<p> <em>一段斜体文字</em></p>
<h2 id="链接和邮件"><a href="#链接和邮件" class="headerlink" title="链接和邮件"></a>链接和邮件</h2><h3 id="链接："><a href="#链接：" class="headerlink" title="链接："></a>链接：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">bla bla bla [example](http://url.com/ &quot;Title&quot;)</div><div class="line">这是我们常用的网站: [百度一下](www.baidu.com &quot;百度一下&quot;)</div></pre></td></tr></table></figure>
<p>效果如下：</p>
<p>这是我们常用的网站: <a href="www.baidu.com" title="百度一下">baidu</a></p>
<p>也可以定义一个id来对应链接地址<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">bla bla bla [example][id]. Then, anywhere else in the doc, define the link:</div><div class="line">[id]: http://example.com/  &quot;Title&quot;</div><div class="line"></div><div class="line">这是我们常用的网站: [baidu][baiduId]</div><div class="line">[baiduId]: www.baidu.com &quot;百度一下&quot;</div></pre></td></tr></table></figure></p>
<p>效果如下：</p>
<p>这是我的<a href="https://tenny-peng.github.io" title="tenny&#39;s blog">博客</a>，欢迎访问。</p>
<h3 id="邮件："><a href="#邮件：" class="headerlink" title="邮件："></a>邮件：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">An email &lt;example@example.com&gt; link.</div><div class="line">这是我的邮箱&lt;mpengtaoqi@163.com&gt;。</div></pre></td></tr></table></figure>
<p>效果如下：</p>
<p>这是我的邮箱<a href="&#109;&#x61;&#105;&#108;&#116;&#111;&#58;&#109;&#112;&#101;&#x6e;&#103;&#116;&#97;&#x6f;&#113;&#105;&#x40;&#x31;&#x36;&#x33;&#46;&#x63;&#x6f;&#109;">&#109;&#112;&#101;&#x6e;&#103;&#116;&#97;&#x6f;&#113;&#105;&#x40;&#x31;&#x36;&#x33;&#46;&#x63;&#x6f;&#109;</a>。</p>
<h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><p>行内引用 (标题可选):<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">![alt text](/path/img.jpg &quot;Title&quot;)</div><div class="line">这里出现一个引用的图片![图片替代文字](https://tenny-peng.github.io/images/avatar.jpg &quot;偷得浮生半日闲&quot;)</div></pre></td></tr></table></figure></p>
<p>效果如下：</p>
<p>这里出现一个引用的图片<img src="https://tenny-peng.github.io/images/avatar.jpg" alt="图片替代文字" title="偷得浮生半日闲"></p>
<p>使用id引用图片链接：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">![alt text][id]</div><div class="line">[id]: /url/to/img.jpg &quot;Title&quot;</div><div class="line"></div><div class="line">使用id引用图片链接![图片替代文字][img_id]</div><div class="line">[img_id](https://tenny-peng.github.io/images/avatar.jpg &quot;偷得浮生半日闲&quot;)</div></pre></td></tr></table></figure></p>
<p>效果如下：</p>
<p>使用id引用图片链接<img src="https://tenny-peng.github.io/images/avatar.jpg" alt="图片替代文字" title="偷得浮生半日闲"></p>
<h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><h3 id="底线形式"><a href="#底线形式" class="headerlink" title="底线形式:"></a>底线形式:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">标题 1</div><div class="line">========</div><div class="line"></div><div class="line">标题 2</div><div class="line">--------</div></pre></td></tr></table></figure>
<p>效果如下：</p>
<h1 id="标题-1"><a href="#标题-1" class="headerlink" title="标题 1"></a>标题 1</h1><h2 id="标题-2"><a href="#标题-2" class="headerlink" title="标题 2"></a>标题 2</h2><h3 id="模式-末尾的-可选"><a href="#模式-末尾的-可选" class="headerlink" title="#模式 (末尾的#可选):"></a>#模式 (末尾的#可选):</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># 标题 1 #</div><div class="line"></div><div class="line">## 标题 2 ##</div><div class="line"></div><div class="line">###### 标题 6</div></pre></td></tr></table></figure>
<p>效果如下：</p>
<h1 id="标题-1-1"><a href="#标题-1-1" class="headerlink" title="标题 1"></a>标题 1</h1><h2 id="标题-2-1"><a href="#标题-2-1" class="headerlink" title="标题 2"></a>标题 2</h2><h6 id="标题-6"><a href="#标题-6" class="headerlink" title="标题 6"></a>标题 6</h6><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h3 id="有序的-不带段落"><a href="#有序的-不带段落" class="headerlink" title="有序的, 不带段落:"></a>有序的, 不带段落:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">1.  Git</div><div class="line">2.  Hexo</div><div class="line">3.  MarkDown</div></pre></td></tr></table></figure>
<p>效果如下：</p>
<ol>
<li>Git</li>
<li>Hexo</li>
<li>MarkDown</li>
</ol>
<h3 id="无序的-带段落"><a href="#无序的-带段落" class="headerlink" title="无序的, 带段落:"></a>无序的, 带段落:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">*   一个条目.</div><div class="line"></div><div class="line">    巴拉巴拉拉，这里是段落文字.</div><div class="line"></div><div class="line">*   其他条目</div></pre></td></tr></table></figure>
<p>效果如下：</p>
<ul>
<li><p>一个条目.</p>
<p>巴拉巴拉巴拉，这里是段落文字.</p>
</li>
<li><p>其他条目</p>
</li>
</ul>
<h3 id="你可以嵌套使用它们："><a href="#你可以嵌套使用它们：" class="headerlink" title="你可以嵌套使用它们："></a>你可以嵌套使用它们：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">*   Work</div><div class="line">    * java</div><div class="line">*   Blog</div><div class="line">    1.  github</div><div class="line">    2.  atom</div><div class="line">        * markdown</div><div class="line">    3. hexo</div><div class="line">*   learn</div></pre></td></tr></table></figure>
<p>效果如下：</p>
<ul>
<li>Work<ul>
<li>java</li>
</ul>
</li>
<li>Blog<ol>
<li>github</li>
<li>atom<ul>
<li>markdown</li>
</ul>
</li>
<li>hexo</li>
</ol>
</li>
<li>learn</li>
</ul>
<h2 id="区块引用"><a href="#区块引用" class="headerlink" title="区块引用"></a>区块引用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&gt; 类似邮件的引用方式</div><div class="line">&gt; 在断好的行前加上`&gt;`</div><div class="line"></div><div class="line">&gt; &gt; 也可以嵌套使用</div><div class="line"></div><div class="line">&gt; #### 引用标题</div><div class="line">&gt;</div><div class="line">&gt; * 也可以是一个列表</div><div class="line">&gt; * 等等</div></pre></td></tr></table></figure>
<p>效果如下：</p>
<blockquote>
<p>类似邮件的引用方式<br>在断好的行前加上<code>&gt;</code></p>
<blockquote>
<p>也可以嵌套使用</p>
</blockquote>
<h4 id="引用标题"><a href="#引用标题" class="headerlink" title="引用标题"></a>引用标题</h4><ul>
<li>也可以是一个列表</li>
<li>等等</li>
</ul>
</blockquote>
<h3 id="内联代码"><a href="#内联代码" class="headerlink" title="内联代码"></a>内联代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">`&lt;some code&gt;` 使用引号和反引号标记行内代码片段。</div><div class="line"></div><div class="line">如果要在代码区段内插入反引号，可以用多个反引号来开启和结束代码区段。</div><div class="line"></div><div class="line">例如 `` `this` ``.</div></pre></td></tr></table></figure>
<p>效果如下：</p>
<p><code>&lt;some code&gt;</code> 使用引号和反引号标记行内代码片段。</p>
<p>如果要在代码区段内插入反引号，可以用多个反引号来开启和结束代码区段。</p>
<p>例如 <code>`this` </code>.</p>
<h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><p>在句段的行首插入1个tab 或 4个空格，则表示代码块。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">这是一段普通的文字。</div><div class="line"></div><div class="line">  这一段代码块。</div></pre></td></tr></table></figure></p>
<h2 id="分隔线"><a href="#分隔线" class="headerlink" title="分隔线"></a>分隔线</h2><p>用三个以上的星号或减号或底线来建立一个水平分隔线。</p>
<p>行内不能有其他东西，但你可以在星号或是减号中间插入空格。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line"></div><div class="line">* * *</div><div class="line"></div><div class="line">- - - -</div></pre></td></tr></table></figure></p>
<p>效果如下：</p>
<hr>
<hr>
<hr>
<h2 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h2><p>在一行的结尾处加上2个或2个以上的空格<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Roses are red,   </div><div class="line">Violets are blue.</div></pre></td></tr></table></figure></p>
<p>效果如下：</p>
<p>Roses are red,<br>Violets are blue.</p>
<h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">| 字段 | 左对齐 | 居中 | 右对齐 |       //表头</div><div class="line">|------|:------|:----:|------:|       //对齐方式(默认左对齐)</div><div class="line">| 1 | left1 | center1 | right1 |      //内容</div><div class="line">| 2 | left2 | center2 | right2 |</div><div class="line">| 3 | left3 | center3 | right3 |</div><div class="line">| 4 | left4 | center4 | right4 |</div></pre></td></tr></table></figure>
<p>效果如下：</p>
<table>
<thead>
<tr>
<th>默认字段</th>
<th style="text-align:left">左对齐字段</th>
<th style="text-align:center">居中字段</th>
<th style="text-align:right">右对齐字段</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td style="text-align:left">left1</td>
<td style="text-align:center">center1</td>
<td style="text-align:right">right1</td>
</tr>
<tr>
<td>2</td>
<td style="text-align:left">left2</td>
<td style="text-align:center">center2</td>
<td style="text-align:right">right2</td>
</tr>
<tr>
<td>3</td>
<td style="text-align:left">left3</td>
<td style="text-align:center">center3</td>
<td style="text-align:right">right3</td>
</tr>
<tr>
<td>4</td>
<td style="text-align:left">left4</td>
<td style="text-align:center">center4</td>
<td style="text-align:right">right4</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;标准mrakdown语法&quot;&gt;&lt;a href=&quot;#标准mrakdown语法&quot; class=&quot;headerlink&quot; title=&quot;标准mrakdown语法&quot;&gt;&lt;/a&gt;标准mrakdown语法&lt;/h1&gt;&lt;h2 id=&quot;加粗和斜体&quot;&gt;&lt;a href=&quot;#加粗和斜体&quot; c
    
    </summary>
    
      <category term="markdown" scheme="https://tenny-peng.github.io/categories/markdown/"/>
    
    
      <category term="markdown" scheme="https://tenny-peng.github.io/tags/markdown/"/>
    
      <category term="语法" scheme="https://tenny-peng.github.io/tags/%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
</feed>
